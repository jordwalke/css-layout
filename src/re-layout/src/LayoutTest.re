let align_items_stretch = "align_items_stretch";

let align_items_center = "align_items_center";

let align_items_flex_start = "align_items_flex_start";

let align_items_flex_end = "align_items_flex_end";

let align_self_center = "align_self_center";

let align_self_flex_end = "align_self_flex_end";

let align_self_flex_start = "align_self_flex_start";

let align_self_flex_end_override_flex_start = "align_self_flex_end_override_flex_start";

let border_no_size = "border_no_size";

let border_container_match_child = "border_container_match_child";

let border_stretch_child = "border_stretch_child";

let border_center_child = "border_center_child";

let max_width = "max_width";

let max_height = "max_height";

let padding_no_size = "padding_no_size";

let padding_container_match_child = "padding_container_match_child";

let padding_stretch_child = "padding_stretch_child";

let padding_center_child = "padding_center_child";

let absolute_layout_width_height_start_top = "absolute_layout_width_height_start_top";

let absolute_layout_width_height_end_bottom = "absolute_layout_width_height_end_bottom";

let absolute_layout_start_top_end_bottom = "absolute_layout_start_top_end_bottom";

let absolute_layout_width_height_start_top_end_bottom = "absolute_layout_width_height_start_top_end_bottom";

let do_not_clamp_height_of_absolute_node_to_height_of_its_overflow_hidden_parent = "do_not_clamp_height_of_absolute_node_to_height_of_its_overflow_hidden_parent";

let flex_direction_column_no_height = "flex_direction_column_no_height";

let flex_direction_row_no_width = "flex_direction_row_no_width";

let flex_direction_column = "flex_direction_column";

let flex_direction_row = "flex_direction_row";

let flex_direction_column_reverse = "flex_direction_column_reverse";

let flex_direction_row_reverse = "flex_direction_row_reverse";

let wrap_column = "wrap_column";

let wrap_row = "wrap_row";

let wrap_row_align_items_flex_end = "wrap_row_align_items_flex_end";

let wrap_row_align_items_center = "wrap_row_align_items_center";

let margin_start = "margin_start";

let margin_end = "margin_end";

let margin_left = "margin_left";

let margin_top = "margin_top";

let margin_right = "margin_right";

let margin_bottom = "margin_bottom";

let align_content_flex_start = "align_content_flex_start";

let align_content_flex_end = "align_content_flex_end";

let align_content_center = "align_content_center";

let align_content_stretch = "align_content_stretch";

let justify_content_row_flex_start = "justify_content_row_flex_start";

let justify_content_row_flex_end = "justify_content_row_flex_end";

let justify_content_row_center = "justify_content_row_center";

let justify_content_row_space_between = "justify_content_row_space_between";

let justify_content_row_space_around = "justify_content_row_space_around";

let justify_content_column_flex_start = "justify_content_column_flex_start";

let justify_content_column_flex_end = "justify_content_column_flex_end";

let justify_content_column_center = "justify_content_column_center";

let justify_content_column_space_between = "justify_content_column_space_between";

let justify_content_column_space_around = "justify_content_column_space_around";

let border_flex_child = "border_flex_child";

let min_height = "min_height";

let min_width = "min_width";

let padding_flex_child = "padding_flex_child";

let margin_and_flex_row = "margin_and_flex_row";

let margin_and_flex_column = "margin_and_flex_column";

let margin_and_stretch_row = "margin_and_stretch_row";

let margin_and_stretch_column = "margin_and_stretch_column";

let margin_with_sibling_row = "margin_with_sibling_row";

let margin_with_sibling_column = "margin_with_sibling_column";

let flex_basis_flex_grow_column = "flex_basis_flex_grow_column";

let flex_basis_flex_grow_row = "flex_basis_flex_grow_row";

let flex_basis_flex_shrink_column = "flex_basis_flex_shrink_column";

let flex_basis_flex_shrink_row = "flex_basis_flex_shrink_row";

let jwalke_border_width_only_start = "jwalke_border_width_only_start";

let jwalke_border_width_only_end = "jwalke_border_width_only_end";


/**
 * Copyright (c) 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
  * @Generated by gentest/gentest.sh with the following input
  *
 <div id="align_items_stretch" style="width: 100px; height: 100px;">
   <div style="height: 10px;"></div>
 </div>

 <div id="align_items_center" style="width: 100px; height: 100px; align-items: center;">
   <div style="height: 10px; width: 10px;"></div>
 </div>

 <div id="align_items_flex_start" style="width: 100px; height: 100px; align-items: flex-start;">
   <div style="height: 10px; width: 10px;"></div>
 </div>

 <div id="align_items_flex_end" style="width: 100px; height: 100px; align-items: flex-end;">
   <div style="height: 10px; width: 10px;"></div>
 </div>

 <div id="align_self_center" style="width:100px; height: 100px;">
   <div style="height: 10px; width: 10px; align-self: center;"></div>
 </div>

 <div id="align_self_flex_end" style="width:100px; height: 100px;">
   <div style="height: 10px; width: 10px; align-self: flex-end;"></div>
 </div>

 <div id="align_self_flex_start" style="width:100px; height: 100px;">
   <div style="height: 10px; width: 10px; align-self: flex-start;"></div>
 </div>

 <div id="align_self_flex_end_override_flex_start" style="width:100px; height: 100px; align-items: flex-start;">
   <div style="height: 10px; width: 10px; align-self: flex-end;"></div>
 </div>

 <div id="border_no_size" style="border-width: 10px;">
 </div>

 <div id="border_container_match_child" style="border-width: 10px;">
   <div style="width: 10px; height: 10px;"></div>
 </div>

 <div id="border_stretch_child" style="width: 100px; height: 100px; border-width: 10px;">
   <div style="height: 10px;"></div>
 </div>

 <div id="border_center_child" style="width: 100px; height: 100px; border-left-width-because-start: 1; border-left-width: 10px; border-top-width: 10px; border-right-width-because-end: 1; border-right-width: 20px; border-bottom-width: 20px; align-items: center; justify-content: center;">
   <div style="height: 10px; width: 10px;"></div>
 </div>

 <div id="max_width" style="width: 100px; height: 100px;">
   <div style="height: 10px; max-width: 50px;"></div>
 </div>

 <div id="max_height" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="width: 10px; max-height: 50px;"></div>
 </div>

 <div id="padding_no_size" style="padding: 10px;">
 </div>

 <div id="padding_container_match_child" style="padding: 10px;">
   <div style="width: 10px; height: 10px;"></div>
 </div>

 <div id="padding_stretch_child" style="width: 100px; height: 100px; padding: 10px;">
   <div style="height: 10px;"></div>
 </div>

 <div id="padding_center_child" style="width: 100px; height: 100px; padding-left-because-start: 1; padding-left: 10px; padding-top: 10px; padding-right-because-end: 1;  padding-right: 20px; padding-bottom: 20px; align-items: center; justify-content: center;">
   <div style="height: 10px; width: 10px;"></div>
 </div>

 <div id="absolute_layout_width_height_start_top" style="width: 100px; height: 100px;">
   <div style="width:10px; height: 10px; position: absolute; left-because-start: 1; left: 10px; top: 10px;"></div>
 </div>

 <div id="absolute_layout_width_height_end_bottom" style="width: 100px; height: 100px;">
   <div style="width:10px; height: 10px; position: absolute; right-because-end: 1; right: 10px; bottom: 10px;"></div>
 </div>

 <div id="absolute_layout_start_top_end_bottom" style="width: 100px; height: 100px;">
   <div style="position: absolute; left-because-start: 1;  start: 10px; top: 10px; right-because-end: 1; right: 10px; bottom: 10px;"></div>
 </div>

 <div id="absolute_layout_width_height_start_top_end_bottom" style="width: 100px; height: 100px;">
   <div style="width:10px; height: 10px; position: absolute; left-because-start: 1; left: 10px; top: 10px; right-because-end: 1; right: 10px; bottom: 10px;"></div>
 </div>

 <div id="do_not_clamp_height_of_absolute_node_to_height_of_its_overflow_hidden_parent" style="height: 50px; width: 50px; overflow: hidden; flex-direction: row;">
   <div style="position: absolute; left-because-start: 1; left: 0; top: 0;">
     <div style="width: 100px; height: 100px;"></div>
   </div>
 </div>

 <div id="flex_direction_column_no_height" style="width: 100px">
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="flex_direction_row_no_width" style="height: 100px; flex-direction: row;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="flex_direction_column" style="height: 100px; width: 100px;">
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="flex_direction_row" style="height: 100px; width: 100px; flex-direction: row;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="flex_direction_column_reverse" style="height: 100px; width: 100px; flex-direction: column-reverse;">
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="flex_direction_row_reverse" style="height: 100px; width: 100px; flex-direction: row-reverse;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="wrap_column" style="height: 100px; width: 60px; flex-wrap: wrap">
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
 </div>

 <div id="wrap_row" style="width: 100px; flex-direction: row; flex-wrap: wrap">
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
 </div>

 <div id="wrap_row_align_items_flex_end" style="width: 100px; flex-direction: row; flex-wrap: wrap; align-items: flex-end;">
   <div style="height: 10px; width: 30px;"></div>
   <div style="height: 20px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
 </div>

 <div id="wrap_row_align_items_center" style="width: 100px; flex-direction: row; flex-wrap: wrap; align-items: center;">
   <div style="height: 10px; width: 30px;"></div>
   <div style="height: 20px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
 </div>

 <div id="margin_start" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="width: 10px; margin-left-because-start: 1;  margin-left: 10px;"></div>
 </div>

 <div id="margin_end" style="width: 100px; height: 100px; flex-direction: row; justify-content: flex-end;">
   <div style="width: 10px; margin-right-because-end: 1; margin-right: 10px;"></div>
 </div>

 <div id="margin_left" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="width: 10px; margin-left: 10px;"></div>
 </div>

 <div id="margin_top" style="width: 100px; height: 100px;">
   <div style="height: 10px; margin-top: 10px;"></div>
 </div>

 <div id="margin_right" style="width: 100px; height: 100px; flex-direction: row; justify-content: flex-end;">
   <div style="width: 10px; margin-right: 10px;"></div>
 </div>

 <div id="margin_bottom" style="width: 100px; height: 100px; justify-content: flex-end;">
   <div style="height: 10px; margin-bottom: 10px;"></div>
 </div>

 <div id="align_content_flex_start" style="width: 100px; height: 100px; flex-wrap: wrap; flex-direction: column; align-content: flex-start;">
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
 </div>

 <div id="align_content_flex_end" style="width: 100px; height: 100px; flex-wrap: wrap; flex-direction: column; align-content: flex-end;">
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
 </div>

 <div id="align_content_center" style="width: 100px; height: 100px; flex-wrap: wrap; flex-direction: column; align-content: center;">
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
 </div>

 <div id="align_content_stretch" style="width: 100px; height: 100px; flex-wrap: wrap; flex-direction: column; align-content: stretch;">
   <div style="width: 50px;"></div>
   <div style="width: 50px;"></div>
   <div style="width: 50px;"></div>
   <div style="width: 50px;"></div>
   <div style="width: 50px;"></div>
 </div>

 <div id="justify_content_row_flex_start" style="width: 102px; height: 102px; flex-direction: row; justify-content: flex-start;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="justify_content_row_flex_end" style="width: 102px; height: 102px; flex-direction: row; justify-content: flex-end;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="justify_content_row_center" style="width: 102px; height: 102px; flex-direction: row; justify-content: center;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="justify_content_row_space_between" style="width: 102px; height: 102px; flex-direction: row; justify-content: space-between;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="justify_content_row_space_around" style="width: 102px; height: 102px; flex-direction: row; justify-content: space-around;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="justify_content_column_flex_start" style="width: 102px; height: 102px; justify-content: flex-start;">
   <div style="height: 10px;"></div>
   <div style="heigth: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="justify_content_column_flex_end" style="width: 102px; height: 102px; justify-content: flex-end;">
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="justify_content_column_center" style="width: 102px; height: 102px; justify-content: center;">
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="justify_content_column_space_between" style="width: 102px; height: 102px; justify-content: space-between;">
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="justify_content_column_space_around" style="width: 102px; height: 102px; justify-content: space-around;">
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="border_flex_child" style="width: 100px; height: 100px; border-width: 10px;">
   <div style="width: 10px; flex-grow:1"></div>
 </div>

 <div id="min_height" style="width: 100px; height: 100px;">
   <div style="flex-grow: 1; min-height: 60px;"></div>
   <div style="flex-grow: 1;"></div>
 </div>

 <div id="min_width" style="width: 100px; height: 100px; flex-direction: row">
   <div style="flex-grow: 1; min-width: 60px;"></div>
   <div style="flex-grow: 1;"></div>
 </div>

 <div id="padding_flex_child" style="width: 100px; height: 100px; padding: 10px;">
   <div style="width: 10px; flex-grow:1"></div>
 </div>

 <div id="margin_and_flex_row" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="margin-left-because-start: 1; margin-left: 10px; margin-right-because-end: 1; margin-right: 10px; flex-grow: 1;"></div>
 </div>

 <div id="margin_and_flex_column" style="width: 100px; height: 100px;">
   <div style="margin-top: 10px; margin-bottom: 10px; flex-grow: 1;"></div>
 </div>

 <div id="margin_and_stretch_row" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="margin-top: 10px; margin-bottom: 10px; flex-grow: 1;"></div>
 </div>

 <div id="margin_and_stretch_column" style="width: 100px; height: 100px;">
   <div style="margin-left-because-start: 1; margin-left: 10px; margin-right-because-end: 1; margin-right: 10px; flex-grow: 1;"></div>
 </div>

 <div id="margin_with_sibling_row" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="margin-right-because-end: 1; margin-right: 10px; flex-grow: 1;"></div>
   <div style="flex-grow: 1;"></div>
 </div>

 <div id="margin_with_sibling_column" style="width: 100px; height: 100px;">
   <div style="margin-bottom: 10px; flex-grow: 1;"></div>
   <div style="flex-grow: 1;"></div>
 </div>

 <div id="flex_basis_flex_grow_column" style="width: 100px; height: 100px;">
   <div style="flex-basis: 50px; flex-grow: 1;"></div>
   <div style="flex-grow: 1;"></div>
 </div>

 <div id="flex_basis_flex_grow_row" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="flex-basis: 50px; flex-grow: 1;"></div>
   <div style="flex-grow: 1;"></div>
 </div>

 <div id="flex_basis_flex_shrink_column" style="width: 100px; height: 100px;">
   <div style="flex-basis: 100px; flex-shrink: 1;"></div>
   <div style="flex-basis: 50px;"></div>
 </div>

 <div id="flex_basis_flex_shrink_row" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="flex-basis: 100px; flex-shrink: 1;"></div>
   <div style="flex-basis: 50px;"></div>
 </div>

 <div id="jwalke_border_width_only_start" style="width: 100px; height: 100px; border-left-width-because-start: 1; border-left-width: 10px; border-top-width: 10px; border-bottom-width: 20px; align-items: center; justify-content: center;">
   <div style="height: 10px; width: 10px;"></div>
 </div>

 <div id="jwalke_border_width_only_end" style="width: 100px; height: 100px; border-right-width-because-end: 1; border-right-width: 10px; border-top-width: 10px; border-bottom-width: 20px; align-items: center; justify-content: center;">
   <div style="height: 10px; width: 10px;"></div>
 </div>
  *
  */
let startTime = Sys.time ();

open LayoutTestUtils;

let times =
  switch LayoutTestUtils.benchmarkTimes {
  | None => 0
  | Some n => n
  };

for ii in 0 to times {
  it
    align_items_stretch
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          0
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          1
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    align_items_center
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, alignItems: CSS_ALIGN_CENTER, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, alignSelf: CSS_ALIGN_CENTER, width: 10.0, height: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          2
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 45.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          3
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 45.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    align_items_flex_start
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, alignItems: CSS_ALIGN_FLEX_START, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, alignSelf: CSS_ALIGN_FLEX_START, width: 10.0, height: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          4
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 0.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          5
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 90.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    align_items_flex_end
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, alignItems: CSS_ALIGN_FLEX_END, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, alignSelf: CSS_ALIGN_FLEX_END, width: 10.0, height: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          6
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 90.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          7
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 0.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    align_self_center
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, alignSelf: CSS_ALIGN_CENTER, width: 10.0, height: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          8
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 45.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          9
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 45.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    align_self_flex_end
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, alignSelf: CSS_ALIGN_FLEX_END, width: 10.0, height: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          10
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 90.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          11
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 0.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    align_self_flex_start
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, alignSelf: CSS_ALIGN_FLEX_START, width: 10.0, height: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          12
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 0.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          13
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 90.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    align_self_flex_end_override_flex_start
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, alignItems: CSS_ALIGN_FLEX_START, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, alignSelf: CSS_ALIGN_FLEX_END, width: 10.0, height: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          14
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 90.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          15
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 0.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    border_no_size
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, borderTop: 10.0, borderBottom: 10.0, borderLeft: 10.0, borderRight: 10.0}
        };
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts 16 ({...root.layout, top: 0.0, left: 0.0, width: 20.0, height: 20.0}, root.layout) [];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts 17 ({...root.layout, top: 0.0, left: 0.0, width: 20.0, height: 20.0}, root.layout) []
      }
    );
  it
    border_container_match_child
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, borderTop: 10.0, borderBottom: 10.0, borderLeft: 10.0, borderRight: 10.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          18
          ({...root.layout, top: 0.0, left: 0.0, width: 30.0, height: 30.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 10.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          19
          ({...root.layout, top: 0.0, left: 0.0, width: 30.0, height: 30.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 10.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    border_stretch_child
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            borderTop: 10.0,
            borderBottom: 10.0,
            width: 100.0,
            height: 100.0,
            borderLeft: 10.0,
            borderRight: 10.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          20
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 10.0, width: 80.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          21
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 10.0, width: 80.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    border_center_child
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            justifyContent: CSS_JUSTIFY_CENTER,
            alignItems: CSS_ALIGN_CENTER,
            borderTop: 10.0,
            borderBottom: 20.0,
            width: 100.0,
            height: 100.0,
            borderStart: 10.0,
            borderEnd: 20.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, alignSelf: CSS_ALIGN_CENTER, width: 10.0, height: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          22
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 40.0, left: 40.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          23
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 40.0, left: 50.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    max_width
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, maxWidth: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          24
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 0.0, width: 50.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          25
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 50.0, width: 50.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    max_height
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, flexDirection: CSS_FLEX_DIRECTION_ROW, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0, maxHeight: 50.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          26
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 0.0, width: 10.0, height: 50.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          27
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 90.0, width: 10.0, height: 50.0}, root_child0.layout)]
      }
    );
  it
    padding_no_size
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            paddingTop: 10.0,
            paddingBottom: 10.0,
            paddingLeft: 10.0,
            paddingRight: 10.0
          }
        };
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts 28 ({...root.layout, top: 0.0, left: 0.0, width: 20.0, height: 20.0}, root.layout) [];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts 29 ({...root.layout, top: 0.0, left: 0.0, width: 20.0, height: 20.0}, root.layout) []
      }
    );
  it
    padding_container_match_child
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            paddingTop: 10.0,
            paddingBottom: 10.0,
            paddingLeft: 10.0,
            paddingRight: 10.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          30
          ({...root.layout, top: 0.0, left: 0.0, width: 30.0, height: 30.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 10.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          31
          ({...root.layout, top: 0.0, left: 0.0, width: 30.0, height: 30.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 10.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    padding_stretch_child
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            paddingTop: 10.0,
            paddingBottom: 10.0,
            width: 100.0,
            height: 100.0,
            paddingLeft: 10.0,
            paddingRight: 10.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          32
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 10.0, width: 80.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          33
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 10.0, width: 80.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    padding_center_child
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            justifyContent: CSS_JUSTIFY_CENTER,
            alignItems: CSS_ALIGN_CENTER,
            paddingTop: 10.0,
            paddingBottom: 20.0,
            width: 100.0,
            height: 100.0,
            paddingStart: 10.0,
            paddingEnd: 20.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, alignSelf: CSS_ALIGN_CENTER, width: 10.0, height: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          34
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 40.0, left: 40.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          35
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 40.0, left: 50.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    absolute_layout_width_height_start_top
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {
            ...root_child0.style,
            positionType: CSS_POSITION_ABSOLUTE,
            top: 10.0,
            start: 10.0,
            width: 10.0,
            height: 10.0
          }
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          36
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 10.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          37
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 80.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    absolute_layout_width_height_end_bottom
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {
            ...root_child0.style,
            positionType: CSS_POSITION_ABSOLUTE,
            bottom: 10.0,
            endd: 10.0,
            width: 10.0,
            height: 10.0
          }
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          38
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 80.0, left: 80.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          39
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 80.0, left: 10.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    absolute_layout_start_top_end_bottom
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {
            ...root_child0.style,
            positionType: CSS_POSITION_ABSOLUTE,
            top: 10.0,
            bottom: 10.0,
            endd: 10.0
          }
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          40
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 90.0, width: 0.0, height: 80.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          41
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 10.0, width: 0.0, height: 80.0}, root_child0.layout)]
      }
    );
  it
    absolute_layout_width_height_start_top_end_bottom
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {
            ...root_child0.style,
            positionType: CSS_POSITION_ABSOLUTE,
            top: 10.0,
            bottom: 10.0,
            start: 10.0,
            endd: 10.0,
            width: 10.0,
            height: 10.0
          }
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          42
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 10.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          43
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 80.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    do_not_clamp_height_of_absolute_node_to_height_of_its_overflow_hidden_parent
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            flexDirection: CSS_FLEX_DIRECTION_ROW,
            overflow: CSS_OVERFLOW_HIDDEN,
            width: 50.0,
            height: 50.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, positionType: CSS_POSITION_ABSOLUTE}
        };
        LayoutSupport.insertChild root root_child0 0;
        let root_child0_child0 = LayoutSupport.createNode ();
        let root_child0_child0 = {
          ...root_child0_child0,
          style: {...root_child0_child0.style, width: 100.0, height: 100.0}
        };
        LayoutSupport.insertChild root_child0 root_child0_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          44
          ({...root.layout, top: 0.0, left: 0.0, width: 50.0, height: 50.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root_child0.layout)];
        assertLayouts
          45
          ({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root_child0.layout)
          [
            (
              {...root_child0_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0},
              root_child0_child0.layout
            )
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          46
          ({...root.layout, top: 0.0, left: 0.0, width: 50.0, height: 50.0}, root.layout)
          [
            (
              {...root_child0.layout, top: 0.0, left: (-50.0), width: 100.0, height: 100.0},
              root_child0.layout
            )
          ];
        assertLayouts
          47
          ({...root_child0.layout, top: 0.0, left: (-50.0), width: 100.0, height: 100.0}, root_child0.layout)
          [
            (
              {...root_child0_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0},
              root_child0_child0.layout
            )
          ]
      }
    );
  it
    flex_direction_column_no_height
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, height: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, height: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          48
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 30.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 10.0, left: 0.0, width: 100.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 20.0, left: 0.0, width: 100.0, height: 10.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          49
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 30.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 10.0, left: 0.0, width: 100.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 20.0, left: 0.0, width: 100.0, height: 10.0}, root_child2.layout)
          ]
      }
    );
  it
    flex_direction_row_no_width
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, flexDirection: CSS_FLEX_DIRECTION_ROW, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, width: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, width: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          50
          ({...root.layout, top: 0.0, left: 0.0, width: 30.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 10.0, height: 100.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 10.0, width: 10.0, height: 100.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 20.0, width: 10.0, height: 100.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          51
          ({...root.layout, top: 0.0, left: 0.0, width: 30.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 20.0, width: 10.0, height: 100.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 10.0, width: 10.0, height: 100.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 0.0, width: 10.0, height: 100.0}, root_child2.layout)
          ]
      }
    );
  it
    flex_direction_column
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, height: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, height: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          52
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 10.0, left: 0.0, width: 100.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 20.0, left: 0.0, width: 100.0, height: 10.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          53
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 10.0, left: 0.0, width: 100.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 20.0, left: 0.0, width: 100.0, height: 10.0}, root_child2.layout)
          ]
      }
    );
  it
    flex_direction_row
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, flexDirection: CSS_FLEX_DIRECTION_ROW, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, width: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, width: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          54
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 10.0, height: 100.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 10.0, width: 10.0, height: 100.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 20.0, width: 10.0, height: 100.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          55
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 90.0, width: 10.0, height: 100.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 80.0, width: 10.0, height: 100.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 70.0, width: 10.0, height: 100.0}, root_child2.layout)
          ]
      }
    );
  it
    flex_direction_column_reverse
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            flexDirection: CSS_FLEX_DIRECTION_COLUMN_REVERSE,
            width: 100.0,
            height: 100.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, height: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, height: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          56
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 90.0, left: 0.0, width: 100.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 80.0, left: 0.0, width: 100.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 70.0, left: 0.0, width: 100.0, height: 10.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          57
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 90.0, left: 0.0, width: 100.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 80.0, left: 0.0, width: 100.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 70.0, left: 0.0, width: 100.0, height: 10.0}, root_child2.layout)
          ]
      }
    );
  it
    flex_direction_row_reverse
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, flexDirection: CSS_FLEX_DIRECTION_ROW_REVERSE, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, width: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, width: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          58
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 90.0, width: 10.0, height: 100.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 80.0, width: 10.0, height: 100.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 70.0, width: 10.0, height: 100.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          59
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 10.0, height: 100.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 10.0, width: 10.0, height: 100.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 20.0, width: 10.0, height: 100.0}, root_child2.layout)
          ]
      }
    );
  it
    wrap_column
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, flexWrap: CSS_WRAP, width: 60.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 30.0, height: 30.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, width: 30.0, height: 30.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, width: 30.0, height: 30.0}};
        LayoutSupport.insertChild root root_child2 2;
        let root_child3 = LayoutSupport.createNode ();
        let root_child3 = {...root_child3, style: {...root_child3.style, width: 30.0, height: 30.0}};
        LayoutSupport.insertChild root root_child3 3;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          60
          ({...root.layout, top: 0.0, left: 0.0, width: 60.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 30.0, height: 30.0}, root_child0.layout),
            ({...root_child1.layout, top: 30.0, left: 0.0, width: 30.0, height: 30.0}, root_child1.layout),
            ({...root_child2.layout, top: 60.0, left: 0.0, width: 30.0, height: 30.0}, root_child2.layout),
            ({...root_child3.layout, top: 0.0, left: 30.0, width: 30.0, height: 30.0}, root_child3.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          61
          ({...root.layout, top: 0.0, left: 0.0, width: 60.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 30.0, width: 30.0, height: 30.0}, root_child0.layout),
            ({...root_child1.layout, top: 30.0, left: 30.0, width: 30.0, height: 30.0}, root_child1.layout),
            ({...root_child2.layout, top: 60.0, left: 30.0, width: 30.0, height: 30.0}, root_child2.layout),
            ({...root_child3.layout, top: 0.0, left: 0.0, width: 30.0, height: 30.0}, root_child3.layout)
          ]
      }
    );
  it
    wrap_row
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, flexDirection: CSS_FLEX_DIRECTION_ROW, flexWrap: CSS_WRAP, width: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 30.0, height: 30.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, width: 30.0, height: 30.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, width: 30.0, height: 30.0}};
        LayoutSupport.insertChild root root_child2 2;
        let root_child3 = LayoutSupport.createNode ();
        let root_child3 = {...root_child3, style: {...root_child3.style, width: 30.0, height: 30.0}};
        LayoutSupport.insertChild root root_child3 3;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          62
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 60.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 30.0, height: 30.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 30.0, width: 30.0, height: 30.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 60.0, width: 30.0, height: 30.0}, root_child2.layout),
            ({...root_child3.layout, top: 30.0, left: 0.0, width: 30.0, height: 30.0}, root_child3.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          63
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 60.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 70.0, width: 30.0, height: 30.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 40.0, width: 30.0, height: 30.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 10.0, width: 30.0, height: 30.0}, root_child2.layout),
            ({...root_child3.layout, top: 30.0, left: 70.0, width: 30.0, height: 30.0}, root_child3.layout)
          ]
      }
    );
  it
    wrap_row_align_items_flex_end
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            flexDirection: CSS_FLEX_DIRECTION_ROW,
            alignItems: CSS_ALIGN_FLEX_END,
            flexWrap: CSS_WRAP,
            width: 100.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, alignSelf: CSS_ALIGN_FLEX_END, width: 30.0, height: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {
          ...root_child1,
          style: {...root_child1.style, alignSelf: CSS_ALIGN_FLEX_END, width: 30.0, height: 20.0}
        };
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {
          ...root_child2,
          style: {...root_child2.style, alignSelf: CSS_ALIGN_FLEX_END, width: 30.0, height: 30.0}
        };
        LayoutSupport.insertChild root root_child2 2;
        let root_child3 = LayoutSupport.createNode ();
        let root_child3 = {
          ...root_child3,
          style: {...root_child3.style, alignSelf: CSS_ALIGN_FLEX_END, width: 30.0, height: 30.0}
        };
        LayoutSupport.insertChild root root_child3 3;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          64
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 60.0}, root.layout)
          [
            ({...root_child0.layout, top: 20.0, left: 0.0, width: 30.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 10.0, left: 30.0, width: 30.0, height: 20.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 60.0, width: 30.0, height: 30.0}, root_child2.layout),
            ({...root_child3.layout, top: 30.0, left: 0.0, width: 30.0, height: 30.0}, root_child3.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          65
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 60.0}, root.layout)
          [
            ({...root_child0.layout, top: 20.0, left: 70.0, width: 30.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 10.0, left: 40.0, width: 30.0, height: 20.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 10.0, width: 30.0, height: 30.0}, root_child2.layout),
            ({...root_child3.layout, top: 30.0, left: 70.0, width: 30.0, height: 30.0}, root_child3.layout)
          ]
      }
    );
  it
    wrap_row_align_items_center
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            flexDirection: CSS_FLEX_DIRECTION_ROW,
            alignItems: CSS_ALIGN_CENTER,
            flexWrap: CSS_WRAP,
            width: 100.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, alignSelf: CSS_ALIGN_CENTER, width: 30.0, height: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {
          ...root_child1,
          style: {...root_child1.style, alignSelf: CSS_ALIGN_CENTER, width: 30.0, height: 20.0}
        };
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {
          ...root_child2,
          style: {...root_child2.style, alignSelf: CSS_ALIGN_CENTER, width: 30.0, height: 30.0}
        };
        LayoutSupport.insertChild root root_child2 2;
        let root_child3 = LayoutSupport.createNode ();
        let root_child3 = {
          ...root_child3,
          style: {...root_child3.style, alignSelf: CSS_ALIGN_CENTER, width: 30.0, height: 30.0}
        };
        LayoutSupport.insertChild root root_child3 3;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          66
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 60.0}, root.layout)
          [
            ({...root_child0.layout, top: 10.0, left: 0.0, width: 30.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 5.0, left: 30.0, width: 30.0, height: 20.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 60.0, width: 30.0, height: 30.0}, root_child2.layout),
            ({...root_child3.layout, top: 30.0, left: 0.0, width: 30.0, height: 30.0}, root_child3.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          67
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 60.0}, root.layout)
          [
            ({...root_child0.layout, top: 10.0, left: 70.0, width: 30.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 5.0, left: 40.0, width: 30.0, height: 20.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 10.0, width: 30.0, height: 30.0}, root_child2.layout),
            ({...root_child3.layout, top: 30.0, left: 70.0, width: 30.0, height: 30.0}, root_child3.layout)
          ]
      }
    );
  it
    margin_start
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, flexDirection: CSS_FLEX_DIRECTION_ROW, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0, marginStart: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          68
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 10.0, width: 10.0, height: 100.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          69
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 80.0, width: 10.0, height: 100.0}, root_child0.layout)]
      }
    );
  it
    margin_end
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            flexDirection: CSS_FLEX_DIRECTION_ROW,
            justifyContent: CSS_JUSTIFY_FLEX_END,
            width: 100.0,
            height: 100.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0, marginEnd: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          70
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 80.0, width: 10.0, height: 100.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          71
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 10.0, width: 10.0, height: 100.0}, root_child0.layout)]
      }
    );
  it
    margin_left
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, flexDirection: CSS_FLEX_DIRECTION_ROW, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0, marginLeft: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          72
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 10.0, width: 10.0, height: 100.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          73
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 90.0, width: 10.0, height: 100.0}, root_child0.layout)]
      }
    );
  it
    margin_top
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, marginTop: 10.0, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          74
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 0.0, width: 100.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          75
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 0.0, width: 100.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    margin_right
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            flexDirection: CSS_FLEX_DIRECTION_ROW,
            justifyContent: CSS_JUSTIFY_FLEX_END,
            width: 100.0,
            height: 100.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0, marginRight: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          76
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 80.0, width: 10.0, height: 100.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          77
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 0.0, width: 10.0, height: 100.0}, root_child0.layout)]
      }
    );
  it
    margin_bottom
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, justifyContent: CSS_JUSTIFY_FLEX_END, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, marginBottom: 10.0, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          78
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 80.0, left: 0.0, width: 100.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          79
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 80.0, left: 0.0, width: 100.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    align_content_flex_start
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            alignContent: CSS_ALIGN_FLEX_START,
            flexWrap: CSS_WRAP,
            width: 100.0,
            height: 100.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        let root_child3 = LayoutSupport.createNode ();
        let root_child3 = {...root_child3, style: {...root_child3.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child3 3;
        let root_child4 = LayoutSupport.createNode ();
        let root_child4 = {...root_child4, style: {...root_child4.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child4 4;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          80
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 50.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 10.0, left: 0.0, width: 50.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 20.0, left: 0.0, width: 50.0, height: 10.0}, root_child2.layout),
            ({...root_child3.layout, top: 30.0, left: 0.0, width: 50.0, height: 10.0}, root_child3.layout),
            ({...root_child4.layout, top: 40.0, left: 0.0, width: 50.0, height: 10.0}, root_child4.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          81
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 50.0, width: 50.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 10.0, left: 50.0, width: 50.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 20.0, left: 50.0, width: 50.0, height: 10.0}, root_child2.layout),
            ({...root_child3.layout, top: 30.0, left: 50.0, width: 50.0, height: 10.0}, root_child3.layout),
            ({...root_child4.layout, top: 40.0, left: 50.0, width: 50.0, height: 10.0}, root_child4.layout)
          ]
      }
    );
  it
    align_content_flex_end
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            alignContent: CSS_ALIGN_FLEX_END,
            flexWrap: CSS_WRAP,
            width: 100.0,
            height: 100.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        let root_child3 = LayoutSupport.createNode ();
        let root_child3 = {...root_child3, style: {...root_child3.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child3 3;
        let root_child4 = LayoutSupport.createNode ();
        let root_child4 = {...root_child4, style: {...root_child4.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child4 4;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          82
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 50.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 10.0, left: 0.0, width: 50.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 20.0, left: 0.0, width: 50.0, height: 10.0}, root_child2.layout),
            ({...root_child3.layout, top: 30.0, left: 0.0, width: 50.0, height: 10.0}, root_child3.layout),
            ({...root_child4.layout, top: 40.0, left: 0.0, width: 50.0, height: 10.0}, root_child4.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          83
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 50.0, width: 50.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 10.0, left: 50.0, width: 50.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 20.0, left: 50.0, width: 50.0, height: 10.0}, root_child2.layout),
            ({...root_child3.layout, top: 30.0, left: 50.0, width: 50.0, height: 10.0}, root_child3.layout),
            ({...root_child4.layout, top: 40.0, left: 50.0, width: 50.0, height: 10.0}, root_child4.layout)
          ]
      }
    );
  it
    align_content_center
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            alignContent: CSS_ALIGN_CENTER,
            flexWrap: CSS_WRAP,
            width: 100.0,
            height: 100.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        let root_child3 = LayoutSupport.createNode ();
        let root_child3 = {...root_child3, style: {...root_child3.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child3 3;
        let root_child4 = LayoutSupport.createNode ();
        let root_child4 = {...root_child4, style: {...root_child4.style, width: 50.0, height: 10.0}};
        LayoutSupport.insertChild root root_child4 4;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          84
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 50.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 10.0, left: 0.0, width: 50.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 20.0, left: 0.0, width: 50.0, height: 10.0}, root_child2.layout),
            ({...root_child3.layout, top: 30.0, left: 0.0, width: 50.0, height: 10.0}, root_child3.layout),
            ({...root_child4.layout, top: 40.0, left: 0.0, width: 50.0, height: 10.0}, root_child4.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          85
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 50.0, width: 50.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 10.0, left: 50.0, width: 50.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 20.0, left: 50.0, width: 50.0, height: 10.0}, root_child2.layout),
            ({...root_child3.layout, top: 30.0, left: 50.0, width: 50.0, height: 10.0}, root_child3.layout),
            ({...root_child4.layout, top: 40.0, left: 50.0, width: 50.0, height: 10.0}, root_child4.layout)
          ]
      }
    );
  it
    align_content_stretch
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            alignContent: CSS_ALIGN_STRETCH,
            flexWrap: CSS_WRAP,
            width: 100.0,
            height: 100.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 50.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, width: 50.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, width: 50.0}};
        LayoutSupport.insertChild root root_child2 2;
        let root_child3 = LayoutSupport.createNode ();
        let root_child3 = {...root_child3, style: {...root_child3.style, width: 50.0}};
        LayoutSupport.insertChild root root_child3 3;
        let root_child4 = LayoutSupport.createNode ();
        let root_child4 = {...root_child4, style: {...root_child4.style, width: 50.0}};
        LayoutSupport.insertChild root root_child4 4;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          86
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 50.0, height: 0.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 0.0, width: 50.0, height: 0.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 0.0, width: 50.0, height: 0.0}, root_child2.layout),
            ({...root_child3.layout, top: 0.0, left: 0.0, width: 50.0, height: 0.0}, root_child3.layout),
            ({...root_child4.layout, top: 0.0, left: 0.0, width: 50.0, height: 0.0}, root_child4.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          87
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 50.0, width: 50.0, height: 0.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 50.0, width: 50.0, height: 0.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 50.0, width: 50.0, height: 0.0}, root_child2.layout),
            ({...root_child3.layout, top: 0.0, left: 50.0, width: 50.0, height: 0.0}, root_child3.layout),
            ({...root_child4.layout, top: 0.0, left: 50.0, width: 50.0, height: 0.0}, root_child4.layout)
          ]
      }
    );
  it
    justify_content_row_flex_start
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, flexDirection: CSS_FLEX_DIRECTION_ROW, width: 102.0, height: 102.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, width: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, width: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          88
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 10.0, height: 102.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 10.0, width: 10.0, height: 102.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 20.0, width: 10.0, height: 102.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          89
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 92.0, width: 10.0, height: 102.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 82.0, width: 10.0, height: 102.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 72.0, width: 10.0, height: 102.0}, root_child2.layout)
          ]
      }
    );
  it
    justify_content_row_flex_end
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            flexDirection: CSS_FLEX_DIRECTION_ROW,
            justifyContent: CSS_JUSTIFY_FLEX_END,
            width: 102.0,
            height: 102.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, width: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, width: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          90
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 72.0, width: 10.0, height: 102.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 82.0, width: 10.0, height: 102.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 92.0, width: 10.0, height: 102.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          91
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 20.0, width: 10.0, height: 102.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 10.0, width: 10.0, height: 102.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 0.0, width: 10.0, height: 102.0}, root_child2.layout)
          ]
      }
    );
  it
    justify_content_row_center
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            flexDirection: CSS_FLEX_DIRECTION_ROW,
            justifyContent: CSS_JUSTIFY_CENTER,
            width: 102.0,
            height: 102.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, width: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, width: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          92
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 36.0, width: 10.0, height: 102.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 46.0, width: 10.0, height: 102.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 56.0, width: 10.0, height: 102.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          93
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 56.0, width: 10.0, height: 102.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 46.0, width: 10.0, height: 102.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 36.0, width: 10.0, height: 102.0}, root_child2.layout)
          ]
      }
    );
  it
    justify_content_row_space_between
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            flexDirection: CSS_FLEX_DIRECTION_ROW,
            justifyContent: CSS_JUSTIFY_SPACE_BETWEEN,
            width: 102.0,
            height: 102.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, width: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, width: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          94
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 10.0, height: 102.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 46.0, width: 10.0, height: 102.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 92.0, width: 10.0, height: 102.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          95
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 92.0, width: 10.0, height: 102.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 46.0, width: 10.0, height: 102.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 0.0, width: 10.0, height: 102.0}, root_child2.layout)
          ]
      }
    );
  it
    justify_content_row_space_around
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            flexDirection: CSS_FLEX_DIRECTION_ROW,
            justifyContent: CSS_JUSTIFY_SPACE_AROUND,
            width: 102.0,
            height: 102.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, width: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, width: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, width: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          96
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 12.0, width: 10.0, height: 102.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 46.0, width: 10.0, height: 102.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 80.0, width: 10.0, height: 102.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          97
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 80.0, width: 10.0, height: 102.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 46.0, width: 10.0, height: 102.0}, root_child1.layout),
            ({...root_child2.layout, top: 0.0, left: 12.0, width: 10.0, height: 102.0}, root_child2.layout)
          ]
      }
    );
  it
    justify_content_column_flex_start
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 102.0, height: 102.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, height: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          98
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 102.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 10.0, left: 0.0, width: 102.0, height: 0.0}, root_child1.layout),
            ({...root_child2.layout, top: 10.0, left: 0.0, width: 102.0, height: 10.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          99
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 102.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 10.0, left: 0.0, width: 102.0, height: 0.0}, root_child1.layout),
            ({...root_child2.layout, top: 10.0, left: 0.0, width: 102.0, height: 10.0}, root_child2.layout)
          ]
      }
    );
  it
    justify_content_column_flex_end
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, justifyContent: CSS_JUSTIFY_FLEX_END, width: 102.0, height: 102.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, height: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, height: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          100
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 72.0, left: 0.0, width: 102.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 82.0, left: 0.0, width: 102.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 92.0, left: 0.0, width: 102.0, height: 10.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          101
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 72.0, left: 0.0, width: 102.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 82.0, left: 0.0, width: 102.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 92.0, left: 0.0, width: 102.0, height: 10.0}, root_child2.layout)
          ]
      }
    );
  it
    justify_content_column_center
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, justifyContent: CSS_JUSTIFY_CENTER, width: 102.0, height: 102.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, height: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, height: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          102
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 36.0, left: 0.0, width: 102.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 46.0, left: 0.0, width: 102.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 56.0, left: 0.0, width: 102.0, height: 10.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          103
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 36.0, left: 0.0, width: 102.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 46.0, left: 0.0, width: 102.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 56.0, left: 0.0, width: 102.0, height: 10.0}, root_child2.layout)
          ]
      }
    );
  it
    justify_content_column_space_between
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, justifyContent: CSS_JUSTIFY_SPACE_BETWEEN, width: 102.0, height: 102.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, height: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, height: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          104
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 102.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 46.0, left: 0.0, width: 102.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 92.0, left: 0.0, width: 102.0, height: 10.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          105
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 102.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 46.0, left: 0.0, width: 102.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 92.0, left: 0.0, width: 102.0, height: 10.0}, root_child2.layout)
          ]
      }
    );
  it
    justify_content_column_space_around
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, justifyContent: CSS_JUSTIFY_SPACE_AROUND, width: 102.0, height: 102.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, height: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, height: 10.0}};
        LayoutSupport.insertChild root root_child1 1;
        let root_child2 = LayoutSupport.createNode ();
        let root_child2 = {...root_child2, style: {...root_child2.style, height: 10.0}};
        LayoutSupport.insertChild root root_child2 2;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          106
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 12.0, left: 0.0, width: 102.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 46.0, left: 0.0, width: 102.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 80.0, left: 0.0, width: 102.0, height: 10.0}, root_child2.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          107
          ({...root.layout, top: 0.0, left: 0.0, width: 102.0, height: 102.0}, root.layout)
          [
            ({...root_child0.layout, top: 12.0, left: 0.0, width: 102.0, height: 10.0}, root_child0.layout),
            ({...root_child1.layout, top: 46.0, left: 0.0, width: 102.0, height: 10.0}, root_child1.layout),
            ({...root_child2.layout, top: 80.0, left: 0.0, width: 102.0, height: 10.0}, root_child2.layout)
          ]
      }
    );
  it
    border_flex_child
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            borderTop: 10.0,
            borderBottom: 10.0,
            width: 100.0,
            height: 100.0,
            borderLeft: 10.0,
            borderRight: 10.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, flexGrow: 1.0, width: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          108
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 10.0, width: 10.0, height: 80.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          109
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 80.0, width: 10.0, height: 80.0}, root_child0.layout)]
      }
    );
  it
    min_height
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, flexGrow: 1.0, minHeight: 60.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, flexGrow: 1.0}};
        LayoutSupport.insertChild root root_child1 1;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          110
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 80.0}, root_child0.layout),
            ({...root_child1.layout, top: 80.0, left: 0.0, width: 100.0, height: 20.0}, root_child1.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          111
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 80.0}, root_child0.layout),
            ({...root_child1.layout, top: 80.0, left: 0.0, width: 100.0, height: 20.0}, root_child1.layout)
          ]
      }
    );
  it
    min_width
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, flexDirection: CSS_FLEX_DIRECTION_ROW, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, flexGrow: 1.0, minWidth: 60.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, flexGrow: 1.0}};
        LayoutSupport.insertChild root root_child1 1;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          112
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 80.0, height: 100.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 80.0, width: 20.0, height: 100.0}, root_child1.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          113
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 20.0, width: 80.0, height: 100.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 0.0, width: 20.0, height: 100.0}, root_child1.layout)
          ]
      }
    );
  it
    padding_flex_child
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            paddingTop: 10.0,
            paddingBottom: 10.0,
            width: 100.0,
            height: 100.0,
            paddingLeft: 10.0,
            paddingRight: 10.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, flexGrow: 1.0, width: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          114
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 10.0, width: 10.0, height: 80.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          115
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 80.0, width: 10.0, height: 80.0}, root_child0.layout)]
      }
    );
  it
    margin_and_flex_row
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, flexDirection: CSS_FLEX_DIRECTION_ROW, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, flexGrow: 1.0, marginStart: 10.0, marginEnd: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          116
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 10.0, width: 80.0, height: 100.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          117
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 10.0, width: 80.0, height: 100.0}, root_child0.layout)]
      }
    );
  it
    margin_and_flex_column
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, flexGrow: 1.0, marginTop: 10.0, marginBottom: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          118
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 0.0, width: 100.0, height: 80.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          119
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 0.0, width: 100.0, height: 80.0}, root_child0.layout)]
      }
    );
  it
    margin_and_stretch_row
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, flexDirection: CSS_FLEX_DIRECTION_ROW, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, flexGrow: 1.0, marginTop: 10.0, marginBottom: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          120
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 0.0, width: 100.0, height: 80.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          121
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 10.0, left: 0.0, width: 100.0, height: 80.0}, root_child0.layout)]
      }
    );
  it
    margin_and_stretch_column
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, flexGrow: 1.0, marginStart: 10.0, marginEnd: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          122
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 10.0, width: 80.0, height: 100.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          123
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 0.0, left: 10.0, width: 80.0, height: 100.0}, root_child0.layout)]
      }
    );
  it
    margin_with_sibling_row
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, flexDirection: CSS_FLEX_DIRECTION_ROW, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, flexGrow: 1.0, marginEnd: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, flexGrow: 1.0}};
        LayoutSupport.insertChild root root_child1 1;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          124
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 45.0, height: 100.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 55.0, width: 45.0, height: 100.0}, root_child1.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          125
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 55.0, width: 45.0, height: 100.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 0.0, width: 45.0, height: 100.0}, root_child1.layout)
          ]
      }
    );
  it
    margin_with_sibling_column
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, flexGrow: 1.0, marginBottom: 10.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, flexGrow: 1.0}};
        LayoutSupport.insertChild root root_child1 1;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          126
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 45.0}, root_child0.layout),
            ({...root_child1.layout, top: 55.0, left: 0.0, width: 100.0, height: 45.0}, root_child1.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          127
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 45.0}, root_child0.layout),
            ({...root_child1.layout, top: 55.0, left: 0.0, width: 100.0, height: 45.0}, root_child1.layout)
          ]
      }
    );
  it
    flex_basis_flex_grow_column
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, flexGrow: 1.0, flexBasis: 50.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, flexGrow: 1.0}};
        LayoutSupport.insertChild root root_child1 1;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          128
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 75.0}, root_child0.layout),
            ({...root_child1.layout, top: 75.0, left: 0.0, width: 100.0, height: 25.0}, root_child1.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          129
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 75.0}, root_child0.layout),
            ({...root_child1.layout, top: 75.0, left: 0.0, width: 100.0, height: 25.0}, root_child1.layout)
          ]
      }
    );
  it
    flex_basis_flex_grow_row
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, flexDirection: CSS_FLEX_DIRECTION_ROW, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, flexGrow: 1.0, flexBasis: 50.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, flexGrow: 1.0}};
        LayoutSupport.insertChild root root_child1 1;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          130
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 75.0, height: 100.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 75.0, width: 25.0, height: 100.0}, root_child1.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          131
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 25.0, width: 75.0, height: 100.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 0.0, width: 25.0, height: 100.0}, root_child1.layout)
          ]
      }
    );
  it
    flex_basis_flex_shrink_column
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {...root, style: {...root.style, width: 100.0, height: 100.0}};
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, flexShrink: 1.0, flexBasis: 100.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, flexBasis: 50.0}};
        LayoutSupport.insertChild root root_child1 1;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          132
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 50.0}, root_child0.layout),
            ({...root_child1.layout, top: 50.0, left: 0.0, width: 100.0, height: 50.0}, root_child1.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          133
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 100.0, height: 50.0}, root_child0.layout),
            ({...root_child1.layout, top: 50.0, left: 0.0, width: 100.0, height: 50.0}, root_child1.layout)
          ]
      }
    );
  it
    flex_basis_flex_shrink_row
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {...root.style, flexDirection: CSS_FLEX_DIRECTION_ROW, width: 100.0, height: 100.0}
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {...root_child0, style: {...root_child0.style, flexShrink: 1.0, flexBasis: 100.0}};
        LayoutSupport.insertChild root root_child0 0;
        let root_child1 = LayoutSupport.createNode ();
        let root_child1 = {...root_child1, style: {...root_child1.style, flexBasis: 50.0}};
        LayoutSupport.insertChild root root_child1 1;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          134
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 0.0, width: 50.0, height: 100.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 50.0, width: 50.0, height: 100.0}, root_child1.layout)
          ];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          135
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [
            ({...root_child0.layout, top: 0.0, left: 50.0, width: 50.0, height: 100.0}, root_child0.layout),
            ({...root_child1.layout, top: 0.0, left: 0.0, width: 50.0, height: 100.0}, root_child1.layout)
          ]
      }
    );
  it
    jwalke_border_width_only_start
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            justifyContent: CSS_JUSTIFY_CENTER,
            alignItems: CSS_ALIGN_CENTER,
            borderTop: 10.0,
            borderBottom: 20.0,
            width: 100.0,
            height: 100.0,
            borderStart: 10.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, alignSelf: CSS_ALIGN_CENTER, width: 10.0, height: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          136
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 40.0, left: 50.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          137
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 40.0, left: 40.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    );
  it
    jwalke_border_width_only_end
    (
      fun () => {
        let root = LayoutSupport.createNode ();
        let root = {
          ...root,
          style: {
            ...root.style,
            justifyContent: CSS_JUSTIFY_CENTER,
            alignItems: CSS_ALIGN_CENTER,
            borderTop: 10.0,
            borderBottom: 20.0,
            width: 100.0,
            height: 100.0,
            borderEnd: 10.0
          }
        };
        let root_child0 = LayoutSupport.createNode ();
        let root_child0 = {
          ...root_child0,
          style: {...root_child0.style, alignSelf: CSS_ALIGN_CENTER, width: 10.0, height: 10.0}
        };
        LayoutSupport.insertChild root root_child0 0;
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_LTR);
        assertLayouts
          138
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 40.0, left: 40.0, width: 10.0, height: 10.0}, root_child0.layout)];
        Layout.layoutNode (root, LayoutSupport.cssUndefined, LayoutSupport.cssUndefined, CSS_DIRECTION_RTL);
        assertLayouts
          139
          ({...root.layout, top: 0.0, left: 0.0, width: 100.0, height: 100.0}, root.layout)
          [({...root_child0.layout, top: 40.0, left: 50.0, width: 10.0, height: 10.0}, root_child0.layout)]
      }
    )
};

let endTime = Sys.time ();

if (times > 0) {
  print_string "TOTAL TIME:\n";
  print_float (endTime -. startTime);
  print_newline ()
} else {
  LayoutTestUtils.displayOutcomes ()
};
