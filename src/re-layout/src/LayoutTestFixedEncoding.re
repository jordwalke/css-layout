/**
 * Copyright (c) 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
  * @Generated by gentest/gentest.sh with the following input
  *
 <div id="align_items_stretch" style="width: 100px; height: 100px;">
   <div style="height: 10px;"></div>
 </div>

 <div id="align_items_center" style="width: 100px; height: 100px; align-items: center;">
   <div style="height: 10px; width: 10px;"></div>
 </div>

 <div id="align_items_flex_start" style="width: 100px; height: 100px; align-items: flex-start;">
   <div style="height: 10px; width: 10px;"></div>
 </div>

 <div id="align_items_flex_end" style="width: 100px; height: 100px; align-items: flex-end;">
   <div style="height: 10px; width: 10px;"></div>
 </div>

 <div id="align_self_center" style="width:100px; height: 100px;">
   <div style="height: 10px; width: 10px; align-self: center;"></div>
 </div>

 <div id="align_self_flex_end" style="width:100px; height: 100px;">
   <div style="height: 10px; width: 10px; align-self: flex-end;"></div>
 </div>

 <div id="align_self_flex_start" style="width:100px; height: 100px;">
   <div style="height: 10px; width: 10px; align-self: flex-start;"></div>
 </div>

 <div id="align_self_flex_end_override_flex_start" style="width:100px; height: 100px; align-items: flex-start;">
   <div style="height: 10px; width: 10px; align-self: flex-end;"></div>
 </div>

 <div id="border_no_size" style="border-width: 10px;">
 </div>

 <div id="border_container_match_child" style="border-width: 10px;">
   <div style="width: 10px; height: 10px;"></div>
 </div>

 <div id="border_stretch_child" style="width: 100px; height: 100px; border-width: 10px;">
   <div style="height: 10px;"></div>
 </div>

 <div id="border_center_child" style="width: 100px; height: 100px; border-left-width-because-start: 1; border-left-width: 10px; border-top-width: 10px; border-right-width-because-end: 1; border-right-width: 20px; border-bottom-width: 20px; align-items: center; justify-content: center;">
   <div style="height: 10px; width: 10px;"></div>
 </div>

 <div id="max_width" style="width: 100px; height: 100px;">
   <div style="height: 10px; max-width: 50px;"></div>
 </div>

 <div id="max_height" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="width: 10px; max-height: 50px;"></div>
 </div>

 <div id="padding_no_size" style="padding: 10px;">
 </div>

 <div id="padding_container_match_child" style="padding: 10px;">
   <div style="width: 10px; height: 10px;"></div>
 </div>

 <div id="padding_stretch_child" style="width: 100px; height: 100px; padding: 10px;">
   <div style="height: 10px;"></div>
 </div>

 <div id="padding_center_child" style="width: 100px; height: 100px; padding-left-because-start: 1; padding-left: 10px; padding-top: 10px; padding-right-because-end: 1;  padding-right: 20px; padding-bottom: 20px; align-items: center; justify-content: center;">
   <div style="height: 10px; width: 10px;"></div>
 </div>

 <div id="absolute_layout_width_height_start_top" style="width: 100px; height: 100px;">
   <div style="width:10px; height: 10px; position: absolute; left-because-start: 1; left: 10px; top: 10px;"></div>
 </div>

 <div id="absolute_layout_width_height_end_bottom" style="width: 100px; height: 100px;">
   <div style="width:10px; height: 10px; position: absolute; right-because-end: 1; right: 10px; bottom: 10px;"></div>
 </div>

 <div id="absolute_layout_start_top_end_bottom" style="width: 100px; height: 100px;">
   <div style="position: absolute; left-because-start: 1;  start: 10px; top: 10px; right-because-end: 1; right: 10px; bottom: 10px;"></div>
 </div>

 <div id="absolute_layout_width_height_start_top_end_bottom" style="width: 100px; height: 100px;">
   <div style="width:10px; height: 10px; position: absolute; left-because-start: 1; left: 10px; top: 10px; right-because-end: 1; right: 10px; bottom: 10px;"></div>
 </div>

 <div id="do_not_clamp_height_of_absolute_node_to_height_of_its_overflow_hidden_parent" style="height: 50px; width: 50px; overflow: hidden; flex-direction: row;">
   <div style="position: absolute; left-because-start: 1; left: 0; top: 0;">
     <div style="width: 100px; height: 100px;"></div>
   </div>
 </div>

 <div id="flex_direction_column_no_height" style="width: 100px">
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="flex_direction_row_no_width" style="height: 100px; flex-direction: row;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="flex_direction_column" style="height: 100px; width: 100px;">
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="flex_direction_row" style="height: 100px; width: 100px; flex-direction: row;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="flex_direction_column_reverse" style="height: 100px; width: 100px; flex-direction: column-reverse;">
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="flex_direction_row_reverse" style="height: 100px; width: 100px; flex-direction: row-reverse;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="wrap_column" style="height: 100px; width: 60px; flex-wrap: wrap">
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
 </div>

 <div id="wrap_row" style="width: 100px; flex-direction: row; flex-wrap: wrap">
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
 </div>

 <div id="wrap_row_align_items_flex_end" style="width: 100px; flex-direction: row; flex-wrap: wrap; align-items: flex-end;">
   <div style="height: 10px; width: 30px;"></div>
   <div style="height: 20px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
 </div>

 <div id="wrap_row_align_items_center" style="width: 100px; flex-direction: row; flex-wrap: wrap; align-items: center;">
   <div style="height: 10px; width: 30px;"></div>
   <div style="height: 20px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
   <div style="height: 30px; width: 30px;"></div>
 </div>

 <div id="margin_start" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="width: 10px; margin-left-because-start: 1;  margin-left: 10px;"></div>
 </div>

 <div id="margin_end" style="width: 100px; height: 100px; flex-direction: row; justify-content: flex-end;">
   <div style="width: 10px; margin-right-because-end: 1; margin-right: 10px;"></div>
 </div>

 <div id="margin_left" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="width: 10px; margin-left: 10px;"></div>
 </div>

 <div id="margin_top" style="width: 100px; height: 100px;">
   <div style="height: 10px; margin-top: 10px;"></div>
 </div>

 <div id="margin_right" style="width: 100px; height: 100px; flex-direction: row; justify-content: flex-end;">
   <div style="width: 10px; margin-right: 10px;"></div>
 </div>

 <div id="margin_bottom" style="width: 100px; height: 100px; justify-content: flex-end;">
   <div style="height: 10px; margin-bottom: 10px;"></div>
 </div>

 <div id="align_content_flex_start" style="width: 100px; height: 100px; flex-wrap: wrap; flex-direction: column; align-content: flex-start;">
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
 </div>

 <div id="align_content_flex_end" style="width: 100px; height: 100px; flex-wrap: wrap; flex-direction: column; align-content: flex-end;">
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
 </div>

 <div id="align_content_center" style="width: 100px; height: 100px; flex-wrap: wrap; flex-direction: column; align-content: center;">
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
   <div style="width: 50px; height: 10px;"></div>
 </div>

 <div id="align_content_stretch" style="width: 100px; height: 100px; flex-wrap: wrap; flex-direction: column; align-content: stretch;">
   <div style="width: 50px;"></div>
   <div style="width: 50px;"></div>
   <div style="width: 50px;"></div>
   <div style="width: 50px;"></div>
   <div style="width: 50px;"></div>
 </div>

 <div id="justify_content_row_flex_start" style="width: 102px; height: 102px; flex-direction: row; justify-content: flex-start;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="justify_content_row_flex_end" style="width: 102px; height: 102px; flex-direction: row; justify-content: flex-end;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="justify_content_row_center" style="width: 102px; height: 102px; flex-direction: row; justify-content: center;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="justify_content_row_space_between" style="width: 102px; height: 102px; flex-direction: row; justify-content: space-between;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="justify_content_row_space_around" style="width: 102px; height: 102px; flex-direction: row; justify-content: space-around;">
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
   <div style="width: 10px;"></div>
 </div>

 <div id="justify_content_column_flex_start" style="width: 102px; height: 102px; justify-content: flex-start;">
   <div style="height: 10px;"></div>
   <div style="heigth: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="justify_content_column_flex_end" style="width: 102px; height: 102px; justify-content: flex-end;">
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="justify_content_column_center" style="width: 102px; height: 102px; justify-content: center;">
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="justify_content_column_space_between" style="width: 102px; height: 102px; justify-content: space-between;">
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="justify_content_column_space_around" style="width: 102px; height: 102px; justify-content: space-around;">
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
   <div style="height: 10px;"></div>
 </div>

 <div id="border_flex_child" style="width: 100px; height: 100px; border-width: 10px;">
   <div style="width: 10px; flex-grow:1"></div>
 </div>

 <div id="min_height" style="width: 100px; height: 100px;">
   <div style="flex-grow: 1; min-height: 60px;"></div>
   <div style="flex-grow: 1;"></div>
 </div>

 <div id="min_width" style="width: 100px; height: 100px; flex-direction: row">
   <div style="flex-grow: 1; min-width: 60px;"></div>
   <div style="flex-grow: 1;"></div>
 </div>

 <div id="padding_flex_child" style="width: 100px; height: 100px; padding: 10px;">
   <div style="width: 10px; flex-grow:1"></div>
 </div>

 <div id="margin_and_flex_row" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="margin-left-because-start: 1; margin-left: 10px; margin-right-because-end: 1; margin-right: 10px; flex-grow: 1;"></div>
 </div>

 <div id="margin_and_flex_column" style="width: 100px; height: 100px;">
   <div style="margin-top: 10px; margin-bottom: 10px; flex-grow: 1;"></div>
 </div>

 <div id="margin_and_stretch_row" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="margin-top: 10px; margin-bottom: 10px; flex-grow: 1;"></div>
 </div>

 <div id="margin_and_stretch_column" style="width: 100px; height: 100px;">
   <div style="margin-left-because-start: 1; margin-left: 10px; margin-right-because-end: 1; margin-right: 10px; flex-grow: 1;"></div>
 </div>

 <div id="margin_with_sibling_row" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="margin-right-because-end: 1; margin-right: 10px; flex-grow: 1;"></div>
   <div style="flex-grow: 1;"></div>
 </div>

 <div id="margin_with_sibling_column" style="width: 100px; height: 100px;">
   <div style="margin-bottom: 10px; flex-grow: 1;"></div>
   <div style="flex-grow: 1;"></div>
 </div>

 <div id="flex_basis_flex_grow_column" style="width: 100px; height: 100px;">
   <div style="flex-basis: 50px; flex-grow: 1;"></div>
   <div style="flex-grow: 1;"></div>
 </div>

 <div id="flex_basis_flex_grow_row" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="flex-basis: 50px; flex-grow: 1;"></div>
   <div style="flex-grow: 1;"></div>
 </div>

 <div id="flex_basis_flex_shrink_column" style="width: 100px; height: 100px;">
   <div style="flex-basis: 100px; flex-shrink: 1;"></div>
   <div style="flex-basis: 50px;"></div>
 </div>

 <div id="flex_basis_flex_shrink_row" style="width: 100px; height: 100px; flex-direction: row;">
   <div style="flex-basis: 100px; flex-shrink: 1;"></div>
   <div style="flex-basis: 50px;"></div>
 </div>

 <div id="jwalke_border_width_only_start" style="width: 100px; height: 100px; border-left-width-because-start: 1; border-left-width: 10px; border-top-width: 10px; border-bottom-width: 20px; align-items: center; justify-content: center;">
   <div style="height: 10px; width: 10px;"></div>
 </div>

 <div id="jwalke_border_width_only_end" style="width: 100px; height: 100px; border-right-width-because-end: 1; border-right-width: 10px; border-top-width: 10px; border-bottom-width: 20px; align-items: center; justify-content: center;">
   <div style="height: 10px; width: 10px;"></div>
 </div>
  *
  */
open LayoutTestUtils;

open LayoutValue;

let align_items_stretch = "align_items_stretch";

let align_items_center = "align_items_center";

let align_items_flex_start = "align_items_flex_start";

let align_items_flex_end = "align_items_flex_end";

let align_self_center = "align_self_center";

let align_self_flex_end = "align_self_flex_end";

let align_self_flex_start = "align_self_flex_start";

let align_self_flex_end_override_flex_start = "align_self_flex_end_override_flex_start";

let border_no_size = "border_no_size";

let border_container_match_child = "border_container_match_child";

let border_stretch_child = "border_stretch_child";

let border_center_child = "border_center_child";

let max_width = "max_width";

let max_height = "max_height";

let padding_no_size = "padding_no_size";

let padding_container_match_child = "padding_container_match_child";

let padding_stretch_child = "padding_stretch_child";

let padding_center_child = "padding_center_child";

let absolute_layout_width_height_start_top = "absolute_layout_width_height_start_top";

let absolute_layout_width_height_end_bottom = "absolute_layout_width_height_end_bottom";

let absolute_layout_start_top_end_bottom = "absolute_layout_start_top_end_bottom";

let absolute_layout_width_height_start_top_end_bottom = "absolute_layout_width_height_start_top_end_bottom";

let do_not_clamp_height_of_absolute_node_to_height_of_its_overflow_hidden_parent = "do_not_clamp_height_of_absolute_node_to_height_of_its_overflow_hidden_parent";

let flex_direction_column_no_height = "flex_direction_column_no_height";

let flex_direction_row_no_width = "flex_direction_row_no_width";

let flex_direction_column = "flex_direction_column";

let flex_direction_row = "flex_direction_row";

let flex_direction_column_reverse = "flex_direction_column_reverse";

let flex_direction_row_reverse = "flex_direction_row_reverse";

let wrap_column = "wrap_column";

let wrap_row = "wrap_row";

let wrap_row_align_items_flex_end = "wrap_row_align_items_flex_end";

let wrap_row_align_items_center = "wrap_row_align_items_center";

let margin_start = "margin_start";

let margin_end = "margin_end";

let margin_left = "margin_left";

let margin_top = "margin_top";

let margin_right = "margin_right";

let margin_bottom = "margin_bottom";

let align_content_flex_start = "align_content_flex_start";

let align_content_flex_end = "align_content_flex_end";

let align_content_center = "align_content_center";

let align_content_stretch = "align_content_stretch";

let justify_content_row_flex_start = "justify_content_row_flex_start";

let justify_content_row_flex_end = "justify_content_row_flex_end";

let justify_content_row_center = "justify_content_row_center";

let justify_content_row_space_between = "justify_content_row_space_between";

let justify_content_row_space_around = "justify_content_row_space_around";

let justify_content_column_flex_start = "justify_content_column_flex_start";

let justify_content_column_flex_end = "justify_content_column_flex_end";

let justify_content_column_center = "justify_content_column_center";

let justify_content_column_space_between = "justify_content_column_space_between";

let justify_content_column_space_around = "justify_content_column_space_around";

let border_flex_child = "border_flex_child";

let min_height = "min_height";

let min_width = "min_width";

let padding_flex_child = "padding_flex_child";

let margin_and_flex_row = "margin_and_flex_row";

let margin_and_flex_column = "margin_and_flex_column";

let margin_and_stretch_row = "margin_and_stretch_row";

let margin_and_stretch_column = "margin_and_stretch_column";

let margin_with_sibling_row = "margin_with_sibling_row";

let margin_with_sibling_column = "margin_with_sibling_column";

let flex_basis_flex_grow_column = "flex_basis_flex_grow_column";

let flex_basis_flex_grow_row = "flex_basis_flex_grow_row";

let flex_basis_flex_shrink_column = "flex_basis_flex_shrink_column";

let flex_basis_flex_shrink_row = "flex_basis_flex_shrink_row";

let jwalke_border_width_only_start = "jwalke_border_width_only_start";

let jwalke_border_width_only_end = "jwalke_border_width_only_end";

open Core_bench.Std;

if (LayoutTestUtils.runMode === Bench) {
  if LayoutTestUtils.shouldBenchmarkAllAsOne {
    Core.Std.Command.run (
      Bench.make_command [
        Bench.Test.create
          name::"all-benchmarks"
          (
            fun () => {
              /* align_items_stretch */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* align_items_center */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                alignItems: CssAlignCenter,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignCenter,
                width: 10000,
                height: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* align_items_flex_start */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                alignItems: CssAlignFlexStart,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignFlexStart,
                width: 10000,
                height: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* align_items_flex_end */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                alignItems: CssAlignFlexEnd,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignFlexEnd,
                width: 10000,
                height: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* align_self_center */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignCenter,
                width: 10000,
                height: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* align_self_flex_end */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignFlexEnd,
                width: 10000,
                height: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* align_self_flex_start */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignFlexStart,
                width: 10000,
                height: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* align_self_flex_end_override_flex_start */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                alignItems: CssAlignFlexStart,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignFlexEnd,
                width: 10000,
                height: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* border_no_size */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                borderTop: 10000,
                borderBottom: 10000,
                borderLeft: 10000,
                borderRight: 10000
              };
              let root = LayoutSupport.createNode withChildren::[||] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* border_container_match_child */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                borderTop: 10000,
                borderBottom: 10000,
                borderLeft: 10000,
                borderRight: 10000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* border_stretch_child */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                borderTop: 10000,
                borderBottom: 10000,
                width: 100000,
                height: 100000,
                borderLeft: 10000,
                borderRight: 10000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* border_center_child */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                justifyContent: CssJustifyCenter,
                alignItems: CssAlignCenter,
                borderTop: 10000,
                borderBottom: 20000,
                width: 100000,
                height: 100000,
                borderStart: 10000,
                borderEnd: 20000
              };
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignCenter,
                width: 10000,
                height: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* max_width */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {...LayoutSupport.defaultStyle, maxWidth: 50000, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* max_height */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, maxHeight: 50000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* padding_no_size */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                paddingTop: 10000,
                paddingBottom: 10000,
                paddingLeft: 10000,
                paddingRight: 10000
              };
              let root = LayoutSupport.createNode withChildren::[||] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* padding_container_match_child */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                paddingTop: 10000,
                paddingBottom: 10000,
                paddingLeft: 10000,
                paddingRight: 10000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* padding_stretch_child */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                paddingTop: 10000,
                paddingBottom: 10000,
                width: 100000,
                height: 100000,
                paddingLeft: 10000,
                paddingRight: 10000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* padding_center_child */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                justifyContent: CssJustifyCenter,
                alignItems: CssAlignCenter,
                paddingTop: 10000,
                paddingBottom: 20000,
                width: 100000,
                height: 100000,
                paddingStart: 10000,
                paddingEnd: 20000
              };
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignCenter,
                width: 10000,
                height: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* absolute_layout_width_height_start_top */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                positionType: CssPositionAbsolute,
                top: 10000,
                start: 10000,
                width: 10000,
                height: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* absolute_layout_width_height_end_bottom */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                positionType: CssPositionAbsolute,
                bottom: 10000,
                endd: 10000,
                width: 10000,
                height: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* absolute_layout_start_top_end_bottom */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                positionType: CssPositionAbsolute,
                top: 10000,
                bottom: 10000,
                endd: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* absolute_layout_width_height_start_top_end_bottom */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                positionType: CssPositionAbsolute,
                top: 10000,
                bottom: 10000,
                start: 10000,
                endd: 10000,
                width: 10000,
                height: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* do_not_clamp_height_of_absolute_node_to_height_of_its_overflow_hidden_parent */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                overflow: Hidden,
                width: 50000,
                height: 50000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, positionType: CssPositionAbsolute};
              let root_child0_child0_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_child0 =
                LayoutSupport.createNode withChildren::[||] andStyle::root_child0_child0_style ();
              let root_child0 =
                LayoutSupport.createNode withChildren::[|root_child0_child0|] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* flex_direction_column_no_height */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000};
              let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* flex_direction_row_no_width */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* flex_direction_column */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* flex_direction_row */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* flex_direction_column_reverse */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionColumnReverse,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* flex_direction_row_reverse */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRowReverse,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* wrap_column */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexWrap: CssWrap,
                width: 60000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root_child3_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
              let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2, root_child3|]
                  andStyle::root_style
                  ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* wrap_row */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                flexWrap: CssWrap,
                width: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root_child3_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
              let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2, root_child3|]
                  andStyle::root_style
                  ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* wrap_row_align_items_flex_end */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                alignItems: CssAlignFlexEnd,
                flexWrap: CssWrap,
                width: 100000
              };
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignFlexEnd,
                width: 30000,
                height: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignFlexEnd,
                width: 30000,
                height: 20000
              };
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignFlexEnd,
                width: 30000,
                height: 30000
              };
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root_child3_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignFlexEnd,
                width: 30000,
                height: 30000
              };
              let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2, root_child3|]
                  andStyle::root_style
                  ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* wrap_row_align_items_center */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                alignItems: CssAlignCenter,
                flexWrap: CssWrap,
                width: 100000
              };
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignCenter,
                width: 30000,
                height: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignCenter,
                width: 30000,
                height: 20000
              };
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignCenter,
                width: 30000,
                height: 30000
              };
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root_child3_style = {
                ...LayoutSupport.defaultStyle,
                alignSelf: CssAlignCenter,
                width: 30000,
                height: 30000
              };
              let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2, root_child3|]
                  andStyle::root_style
                  ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* margin_start */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, marginStart: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* margin_end */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                justifyContent: CssJustifyFlexEnd,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, marginEnd: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* margin_left */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, marginLeft: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* margin_top */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {...LayoutSupport.defaultStyle, marginTop: 10000, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* margin_right */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                justifyContent: CssJustifyFlexEnd,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, marginRight: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* margin_bottom */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                justifyContent: CssJustifyFlexEnd,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, marginBottom: 10000, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* align_content_flex_start */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                alignContent: CssAlignFlexStart,
                flexWrap: CssWrap,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root_child3_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
              let root_child4_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child4 = LayoutSupport.createNode withChildren::[||] andStyle::root_child4_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2, root_child3, root_child4|]
                  andStyle::root_style
                  ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* align_content_flex_end */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                alignContent: CssAlignFlexEnd,
                flexWrap: CssWrap,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root_child3_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
              let root_child4_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child4 = LayoutSupport.createNode withChildren::[||] andStyle::root_child4_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2, root_child3, root_child4|]
                  andStyle::root_style
                  ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* align_content_center */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                alignContent: CssAlignCenter,
                flexWrap: CssWrap,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root_child3_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
              let root_child4_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
              let root_child4 = LayoutSupport.createNode withChildren::[||] andStyle::root_child4_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2, root_child3, root_child4|]
                  andStyle::root_style
                  ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* align_content_stretch */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                alignContent: CssAlignStretch,
                flexWrap: CssWrap,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 50000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, width: 50000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, width: 50000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root_child3_style = {...LayoutSupport.defaultStyle, width: 50000};
              let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
              let root_child4_style = {...LayoutSupport.defaultStyle, width: 50000};
              let root_child4 = LayoutSupport.createNode withChildren::[||] andStyle::root_child4_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2, root_child3, root_child4|]
                  andStyle::root_style
                  ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* justify_content_row_flex_start */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                width: 102000,
                height: 102000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* justify_content_row_flex_end */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                justifyContent: CssJustifyFlexEnd,
                width: 102000,
                height: 102000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* justify_content_row_center */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                justifyContent: CssJustifyCenter,
                width: 102000,
                height: 102000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* justify_content_row_space_between */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                justifyContent: CssJustifySpaceBetween,
                width: 102000,
                height: 102000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* justify_content_row_space_around */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                justifyContent: CssJustifySpaceAround,
                width: 102000,
                height: 102000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* justify_content_column_flex_start */
              let root_style = {...LayoutSupport.defaultStyle, width: 102000, height: 102000};
              let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = LayoutSupport.defaultStyle;
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* justify_content_column_flex_end */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                justifyContent: CssJustifyFlexEnd,
                width: 102000,
                height: 102000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* justify_content_column_center */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                justifyContent: CssJustifyCenter,
                width: 102000,
                height: 102000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* justify_content_column_space_between */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                justifyContent: CssJustifySpaceBetween,
                width: 102000,
                height: 102000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* justify_content_column_space_around */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                justifyContent: CssJustifySpaceAround,
                width: 102000,
                height: 102000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
              let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
              let root =
                LayoutSupport.createNode
                  withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* border_flex_child */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                borderTop: 10000,
                borderBottom: 10000,
                width: 100000,
                height: 100000,
                borderLeft: 10000,
                borderRight: 10000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, width: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* min_height */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, minHeight: 60000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root =
                LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* min_width */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, minWidth: 60000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root =
                LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* padding_flex_child */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                paddingTop: 10000,
                paddingBottom: 10000,
                width: 100000,
                height: 100000,
                paddingLeft: 10000,
                paddingRight: 10000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, width: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* margin_and_flex_row */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                flexGrow: 1000,
                marginStart: 10000,
                marginEnd: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* margin_and_flex_column */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                flexGrow: 1000,
                marginTop: 10000,
                marginBottom: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* margin_and_stretch_row */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                flexGrow: 1000,
                marginTop: 10000,
                marginBottom: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* margin_and_stretch_column */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {
                ...LayoutSupport.defaultStyle,
                flexGrow: 1000,
                marginStart: 10000,
                marginEnd: 10000
              };
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* margin_with_sibling_row */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, marginEnd: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root =
                LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* margin_with_sibling_column */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, marginBottom: 10000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root =
                LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* flex_basis_flex_grow_column */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, flexBasis: 50000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root =
                LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* flex_basis_flex_grow_row */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, flexBasis: 50000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root =
                LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* flex_basis_flex_shrink_column */
              let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
              let root_child0_style = {...LayoutSupport.defaultStyle, flexShrink: 1000, flexBasis: 100000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, flexBasis: 50000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root =
                LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
              /* flex_basis_flex_shrink_row */
              let root_style = {
                ...LayoutSupport.defaultStyle,
                flexDirection: CssFlexDirectionRow,
                width: 100000,
                height: 100000
              };
              let root_child0_style = {...LayoutSupport.defaultStyle, flexShrink: 1000, flexBasis: 100000};
              let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
              let root_child1_style = {...LayoutSupport.defaultStyle, flexBasis: 50000};
              let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
              let root =
                LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
              Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
            }
          )
      ]
    )
  } else {
    let bench_align_items_stretch () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_align_items_center () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        alignItems: CssAlignCenter,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignCenter,
        width: 10000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_align_items_flex_start () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        alignItems: CssAlignFlexStart,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignFlexStart,
        width: 10000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_align_items_flex_end () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        alignItems: CssAlignFlexEnd,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignFlexEnd,
        width: 10000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_align_self_center () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignCenter,
        width: 10000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_align_self_flex_end () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignFlexEnd,
        width: 10000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_align_self_flex_start () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignFlexStart,
        width: 10000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_align_self_flex_end_override_flex_start () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        alignItems: CssAlignFlexStart,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignFlexEnd,
        width: 10000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_border_no_size () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        borderTop: 10000,
        borderBottom: 10000,
        borderLeft: 10000,
        borderRight: 10000
      };
      let root = LayoutSupport.createNode withChildren::[||] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_border_container_match_child () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        borderTop: 10000,
        borderBottom: 10000,
        borderLeft: 10000,
        borderRight: 10000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_border_stretch_child () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        borderTop: 10000,
        borderBottom: 10000,
        width: 100000,
        height: 100000,
        borderLeft: 10000,
        borderRight: 10000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_border_center_child () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        justifyContent: CssJustifyCenter,
        alignItems: CssAlignCenter,
        borderTop: 10000,
        borderBottom: 20000,
        width: 100000,
        height: 100000,
        borderStart: 10000,
        borderEnd: 20000
      };
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignCenter,
        width: 10000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_max_width () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {...LayoutSupport.defaultStyle, maxWidth: 50000, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_max_height () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, maxHeight: 50000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_padding_no_size () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        paddingTop: 10000,
        paddingBottom: 10000,
        paddingLeft: 10000,
        paddingRight: 10000
      };
      let root = LayoutSupport.createNode withChildren::[||] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_padding_container_match_child () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        paddingTop: 10000,
        paddingBottom: 10000,
        paddingLeft: 10000,
        paddingRight: 10000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_padding_stretch_child () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        paddingTop: 10000,
        paddingBottom: 10000,
        width: 100000,
        height: 100000,
        paddingLeft: 10000,
        paddingRight: 10000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_padding_center_child () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        justifyContent: CssJustifyCenter,
        alignItems: CssAlignCenter,
        paddingTop: 10000,
        paddingBottom: 20000,
        width: 100000,
        height: 100000,
        paddingStart: 10000,
        paddingEnd: 20000
      };
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignCenter,
        width: 10000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_absolute_layout_width_height_start_top () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        positionType: CssPositionAbsolute,
        top: 10000,
        start: 10000,
        width: 10000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_absolute_layout_width_height_end_bottom () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        positionType: CssPositionAbsolute,
        bottom: 10000,
        endd: 10000,
        width: 10000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_absolute_layout_start_top_end_bottom () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        positionType: CssPositionAbsolute,
        top: 10000,
        bottom: 10000,
        endd: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_absolute_layout_width_height_start_top_end_bottom () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        positionType: CssPositionAbsolute,
        top: 10000,
        bottom: 10000,
        start: 10000,
        endd: 10000,
        width: 10000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_do_not_clamp_height_of_absolute_node_to_height_of_its_overflow_hidden_parent () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        overflow: Hidden,
        width: 50000,
        height: 50000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, positionType: CssPositionAbsolute};
      let root_child0_child0_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_child0 =
        LayoutSupport.createNode withChildren::[||] andStyle::root_child0_child0_style ();
      let root_child0 =
        LayoutSupport.createNode withChildren::[|root_child0_child0|] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_flex_direction_column_no_height () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000};
      let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_flex_direction_row_no_width () => {
      let root_style = {...LayoutSupport.defaultStyle, flexDirection: CssFlexDirectionRow, height: 100000};
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_flex_direction_column () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_flex_direction_row () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_flex_direction_column_reverse () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionColumnReverse,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_flex_direction_row_reverse () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRowReverse,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_wrap_column () => {
      let root_style = {...LayoutSupport.defaultStyle, flexWrap: CssWrap, width: 60000, height: 100000};
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root_child3_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
      let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2, root_child3|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_wrap_row () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        flexWrap: CssWrap,
        width: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root_child3_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
      let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2, root_child3|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_wrap_row_align_items_flex_end () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        alignItems: CssAlignFlexEnd,
        flexWrap: CssWrap,
        width: 100000
      };
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignFlexEnd,
        width: 30000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignFlexEnd,
        width: 30000,
        height: 20000
      };
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignFlexEnd,
        width: 30000,
        height: 30000
      };
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root_child3_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignFlexEnd,
        width: 30000,
        height: 30000
      };
      let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2, root_child3|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_wrap_row_align_items_center () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        alignItems: CssAlignCenter,
        flexWrap: CssWrap,
        width: 100000
      };
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignCenter,
        width: 30000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignCenter,
        width: 30000,
        height: 20000
      };
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignCenter,
        width: 30000,
        height: 30000
      };
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root_child3_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignCenter,
        width: 30000,
        height: 30000
      };
      let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2, root_child3|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_margin_start () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, marginStart: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_margin_end () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        justifyContent: CssJustifyFlexEnd,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, marginEnd: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_margin_left () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, marginLeft: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_margin_top () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {...LayoutSupport.defaultStyle, marginTop: 10000, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_margin_right () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        justifyContent: CssJustifyFlexEnd,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, marginRight: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_margin_bottom () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        justifyContent: CssJustifyFlexEnd,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, marginBottom: 10000, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_align_content_flex_start () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        alignContent: CssAlignFlexStart,
        flexWrap: CssWrap,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root_child3_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
      let root_child4_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child4 = LayoutSupport.createNode withChildren::[||] andStyle::root_child4_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2, root_child3, root_child4|]
          andStyle::root_style
          ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_align_content_flex_end () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        alignContent: CssAlignFlexEnd,
        flexWrap: CssWrap,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root_child3_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
      let root_child4_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child4 = LayoutSupport.createNode withChildren::[||] andStyle::root_child4_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2, root_child3, root_child4|]
          andStyle::root_style
          ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_align_content_center () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        alignContent: CssAlignCenter,
        flexWrap: CssWrap,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root_child3_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
      let root_child4_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
      let root_child4 = LayoutSupport.createNode withChildren::[||] andStyle::root_child4_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2, root_child3, root_child4|]
          andStyle::root_style
          ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_align_content_stretch () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        alignContent: CssAlignStretch,
        flexWrap: CssWrap,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 50000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, width: 50000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, width: 50000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root_child3_style = {...LayoutSupport.defaultStyle, width: 50000};
      let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
      let root_child4_style = {...LayoutSupport.defaultStyle, width: 50000};
      let root_child4 = LayoutSupport.createNode withChildren::[||] andStyle::root_child4_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2, root_child3, root_child4|]
          andStyle::root_style
          ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_justify_content_row_flex_start () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        width: 102000,
        height: 102000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_justify_content_row_flex_end () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        justifyContent: CssJustifyFlexEnd,
        width: 102000,
        height: 102000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_justify_content_row_center () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        justifyContent: CssJustifyCenter,
        width: 102000,
        height: 102000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_justify_content_row_space_between () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        justifyContent: CssJustifySpaceBetween,
        width: 102000,
        height: 102000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_justify_content_row_space_around () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        justifyContent: CssJustifySpaceAround,
        width: 102000,
        height: 102000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_justify_content_column_flex_start () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 102000, height: 102000};
      let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = LayoutSupport.defaultStyle;
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_justify_content_column_flex_end () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        justifyContent: CssJustifyFlexEnd,
        width: 102000,
        height: 102000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_justify_content_column_center () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        justifyContent: CssJustifyCenter,
        width: 102000,
        height: 102000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_justify_content_column_space_between () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        justifyContent: CssJustifySpaceBetween,
        width: 102000,
        height: 102000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_justify_content_column_space_around () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        justifyContent: CssJustifySpaceAround,
        width: 102000,
        height: 102000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
      let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
      let root =
        LayoutSupport.createNode
          withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_border_flex_child () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        borderTop: 10000,
        borderBottom: 10000,
        width: 100000,
        height: 100000,
        borderLeft: 10000,
        borderRight: 10000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, width: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_min_height () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, minHeight: 60000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_min_width () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, minWidth: 60000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_padding_flex_child () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        paddingTop: 10000,
        paddingBottom: 10000,
        width: 100000,
        height: 100000,
        paddingLeft: 10000,
        paddingRight: 10000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, width: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_margin_and_flex_row () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        flexGrow: 1000,
        marginStart: 10000,
        marginEnd: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_margin_and_flex_column () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        flexGrow: 1000,
        marginTop: 10000,
        marginBottom: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_margin_and_stretch_row () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        flexGrow: 1000,
        marginTop: 10000,
        marginBottom: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_margin_and_stretch_column () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        flexGrow: 1000,
        marginStart: 10000,
        marginEnd: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_margin_with_sibling_row () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, marginEnd: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_margin_with_sibling_column () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, marginBottom: 10000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_flex_basis_flex_grow_column () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, flexBasis: 50000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_flex_basis_flex_grow_row () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, flexBasis: 50000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_flex_basis_flex_shrink_column () => {
      let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
      let root_child0_style = {...LayoutSupport.defaultStyle, flexShrink: 1000, flexBasis: 100000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, flexBasis: 50000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_flex_basis_flex_shrink_row () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        flexDirection: CssFlexDirectionRow,
        width: 100000,
        height: 100000
      };
      let root_child0_style = {...LayoutSupport.defaultStyle, flexShrink: 1000, flexBasis: 100000};
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root_child1_style = {...LayoutSupport.defaultStyle, flexBasis: 50000};
      let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_jwalke_border_width_only_start () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        justifyContent: CssJustifyCenter,
        alignItems: CssAlignCenter,
        borderTop: 10000,
        borderBottom: 20000,
        width: 100000,
        height: 100000,
        borderStart: 10000
      };
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignCenter,
        width: 10000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let bench_jwalke_border_width_only_end () => {
      let root_style = {
        ...LayoutSupport.defaultStyle,
        justifyContent: CssJustifyCenter,
        alignItems: CssAlignCenter,
        borderTop: 10000,
        borderBottom: 20000,
        width: 100000,
        height: 100000,
        borderEnd: 10000
      };
      let root_child0_style = {
        ...LayoutSupport.defaultStyle,
        alignSelf: CssAlignCenter,
        width: 10000,
        height: 10000
      };
      let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
      let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
      Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl
    };
    let benchmarks = [];
    let benchmarks =
      LayoutTestUtils.shouldRun align_items_stretch ?
        [Bench.Test.create name::align_items_stretch bench_align_items_stretch, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun align_items_center ?
        [Bench.Test.create name::align_items_center bench_align_items_center, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun align_items_flex_start ?
        [Bench.Test.create name::align_items_flex_start bench_align_items_flex_start, ...benchmarks] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun align_items_flex_end ?
        [Bench.Test.create name::align_items_flex_end bench_align_items_flex_end, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun align_self_center ?
        [Bench.Test.create name::align_self_center bench_align_self_center, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun align_self_flex_end ?
        [Bench.Test.create name::align_self_flex_end bench_align_self_flex_end, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun align_self_flex_start ?
        [Bench.Test.create name::align_self_flex_start bench_align_self_flex_start, ...benchmarks] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun align_self_flex_end_override_flex_start ?
        [
          Bench.Test.create
            name::align_self_flex_end_override_flex_start bench_align_self_flex_end_override_flex_start,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun border_no_size ?
        [Bench.Test.create name::border_no_size bench_border_no_size, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun border_container_match_child ?
        [
          Bench.Test.create name::border_container_match_child bench_border_container_match_child,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun border_stretch_child ?
        [Bench.Test.create name::border_stretch_child bench_border_stretch_child, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun border_center_child ?
        [Bench.Test.create name::border_center_child bench_border_center_child, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun max_width ?
        [Bench.Test.create name::max_width bench_max_width, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun max_height ?
        [Bench.Test.create name::max_height bench_max_height, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun padding_no_size ?
        [Bench.Test.create name::padding_no_size bench_padding_no_size, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun padding_container_match_child ?
        [
          Bench.Test.create name::padding_container_match_child bench_padding_container_match_child,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun padding_stretch_child ?
        [Bench.Test.create name::padding_stretch_child bench_padding_stretch_child, ...benchmarks] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun padding_center_child ?
        [Bench.Test.create name::padding_center_child bench_padding_center_child, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun absolute_layout_width_height_start_top ?
        [
          Bench.Test.create
            name::absolute_layout_width_height_start_top bench_absolute_layout_width_height_start_top,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun absolute_layout_width_height_end_bottom ?
        [
          Bench.Test.create
            name::absolute_layout_width_height_end_bottom bench_absolute_layout_width_height_end_bottom,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun absolute_layout_start_top_end_bottom ?
        [
          Bench.Test.create
            name::absolute_layout_start_top_end_bottom bench_absolute_layout_start_top_end_bottom,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun absolute_layout_width_height_start_top_end_bottom ?
        [
          Bench.Test.create
            name::absolute_layout_width_height_start_top_end_bottom
            bench_absolute_layout_width_height_start_top_end_bottom,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun do_not_clamp_height_of_absolute_node_to_height_of_its_overflow_hidden_parent ?
        [
          Bench.Test.create
            name::do_not_clamp_height_of_absolute_node_to_height_of_its_overflow_hidden_parent
            bench_do_not_clamp_height_of_absolute_node_to_height_of_its_overflow_hidden_parent,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun flex_direction_column_no_height ?
        [
          Bench.Test.create name::flex_direction_column_no_height bench_flex_direction_column_no_height,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun flex_direction_row_no_width ?
        [
          Bench.Test.create name::flex_direction_row_no_width bench_flex_direction_row_no_width,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun flex_direction_column ?
        [Bench.Test.create name::flex_direction_column bench_flex_direction_column, ...benchmarks] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun flex_direction_row ?
        [Bench.Test.create name::flex_direction_row bench_flex_direction_row, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun flex_direction_column_reverse ?
        [
          Bench.Test.create name::flex_direction_column_reverse bench_flex_direction_column_reverse,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun flex_direction_row_reverse ?
        [
          Bench.Test.create name::flex_direction_row_reverse bench_flex_direction_row_reverse,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun wrap_column ?
        [Bench.Test.create name::wrap_column bench_wrap_column, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun wrap_row ?
        [Bench.Test.create name::wrap_row bench_wrap_row, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun wrap_row_align_items_flex_end ?
        [
          Bench.Test.create name::wrap_row_align_items_flex_end bench_wrap_row_align_items_flex_end,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun wrap_row_align_items_center ?
        [
          Bench.Test.create name::wrap_row_align_items_center bench_wrap_row_align_items_center,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun margin_start ?
        [Bench.Test.create name::margin_start bench_margin_start, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun margin_end ?
        [Bench.Test.create name::margin_end bench_margin_end, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun margin_left ?
        [Bench.Test.create name::margin_left bench_margin_left, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun margin_top ?
        [Bench.Test.create name::margin_top bench_margin_top, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun margin_right ?
        [Bench.Test.create name::margin_right bench_margin_right, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun margin_bottom ?
        [Bench.Test.create name::margin_bottom bench_margin_bottom, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun align_content_flex_start ?
        [Bench.Test.create name::align_content_flex_start bench_align_content_flex_start, ...benchmarks] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun align_content_flex_end ?
        [Bench.Test.create name::align_content_flex_end bench_align_content_flex_end, ...benchmarks] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun align_content_center ?
        [Bench.Test.create name::align_content_center bench_align_content_center, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun align_content_stretch ?
        [Bench.Test.create name::align_content_stretch bench_align_content_stretch, ...benchmarks] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun justify_content_row_flex_start ?
        [
          Bench.Test.create name::justify_content_row_flex_start bench_justify_content_row_flex_start,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun justify_content_row_flex_end ?
        [
          Bench.Test.create name::justify_content_row_flex_end bench_justify_content_row_flex_end,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun justify_content_row_center ?
        [
          Bench.Test.create name::justify_content_row_center bench_justify_content_row_center,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun justify_content_row_space_between ?
        [
          Bench.Test.create name::justify_content_row_space_between bench_justify_content_row_space_between,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun justify_content_row_space_around ?
        [
          Bench.Test.create name::justify_content_row_space_around bench_justify_content_row_space_around,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun justify_content_column_flex_start ?
        [
          Bench.Test.create name::justify_content_column_flex_start bench_justify_content_column_flex_start,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun justify_content_column_flex_end ?
        [
          Bench.Test.create name::justify_content_column_flex_end bench_justify_content_column_flex_end,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun justify_content_column_center ?
        [
          Bench.Test.create name::justify_content_column_center bench_justify_content_column_center,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun justify_content_column_space_between ?
        [
          Bench.Test.create
            name::justify_content_column_space_between bench_justify_content_column_space_between,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun justify_content_column_space_around ?
        [
          Bench.Test.create
            name::justify_content_column_space_around bench_justify_content_column_space_around,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun border_flex_child ?
        [Bench.Test.create name::border_flex_child bench_border_flex_child, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun min_height ?
        [Bench.Test.create name::min_height bench_min_height, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun min_width ?
        [Bench.Test.create name::min_width bench_min_width, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun padding_flex_child ?
        [Bench.Test.create name::padding_flex_child bench_padding_flex_child, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun margin_and_flex_row ?
        [Bench.Test.create name::margin_and_flex_row bench_margin_and_flex_row, ...benchmarks] : benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun margin_and_flex_column ?
        [Bench.Test.create name::margin_and_flex_column bench_margin_and_flex_column, ...benchmarks] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun margin_and_stretch_row ?
        [Bench.Test.create name::margin_and_stretch_row bench_margin_and_stretch_row, ...benchmarks] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun margin_and_stretch_column ?
        [Bench.Test.create name::margin_and_stretch_column bench_margin_and_stretch_column, ...benchmarks] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun margin_with_sibling_row ?
        [Bench.Test.create name::margin_with_sibling_row bench_margin_with_sibling_row, ...benchmarks] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun margin_with_sibling_column ?
        [
          Bench.Test.create name::margin_with_sibling_column bench_margin_with_sibling_column,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun flex_basis_flex_grow_column ?
        [
          Bench.Test.create name::flex_basis_flex_grow_column bench_flex_basis_flex_grow_column,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun flex_basis_flex_grow_row ?
        [Bench.Test.create name::flex_basis_flex_grow_row bench_flex_basis_flex_grow_row, ...benchmarks] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun flex_basis_flex_shrink_column ?
        [
          Bench.Test.create name::flex_basis_flex_shrink_column bench_flex_basis_flex_shrink_column,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun flex_basis_flex_shrink_row ?
        [
          Bench.Test.create name::flex_basis_flex_shrink_row bench_flex_basis_flex_shrink_row,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun jwalke_border_width_only_start ?
        [
          Bench.Test.create name::jwalke_border_width_only_start bench_jwalke_border_width_only_start,
          ...benchmarks
        ] :
        benchmarks;
    let benchmarks =
      LayoutTestUtils.shouldRun jwalke_border_width_only_end ?
        [
          Bench.Test.create name::jwalke_border_width_only_end bench_jwalke_border_width_only_end,
          ...benchmarks
        ] :
        benchmarks;
    Core.Std.Command.run (Bench.make_command benchmarks)
  }
} else {
  it
    align_items_stretch
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            0
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 0, width: 100000, height: 10000}, root_child0.layout)]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            1
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 0, width: 100000, height: 10000}, root_child0.layout)]
        }
      }
    );
  it
    align_items_center
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          alignItems: CssAlignCenter,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignCenter,
          width: 10000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 45000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            2
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 45000, width: 10000, height: 10000}, root_child0.layout)]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 45000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            3
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 45000, width: 10000, height: 10000}, root_child0.layout)]
        }
      }
    );
  it
    align_items_flex_start
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          alignItems: CssAlignFlexStart,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignFlexStart,
          width: 10000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            4
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 0, width: 10000, height: 10000}, root_child0.layout)]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 90000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            5
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 90000, width: 10000, height: 10000}, root_child0.layout)]
        }
      }
    );
  it
    align_items_flex_end
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          alignItems: CssAlignFlexEnd,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignFlexEnd,
          width: 10000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 90000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            6
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 90000, width: 10000, height: 10000}, root_child0.layout)]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            7
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 0, width: 10000, height: 10000}, root_child0.layout)]
        }
      }
    );
  it
    align_self_center
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignCenter,
          width: 10000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 45000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            8
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 45000, width: 10000, height: 10000}, root_child0.layout)]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 45000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            9
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 45000, width: 10000, height: 10000}, root_child0.layout)]
        }
      }
    );
  it
    align_self_flex_end
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignFlexEnd,
          width: 10000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 90000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            10
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 90000, width: 10000, height: 10000}, root_child0.layout)]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            11
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 0, width: 10000, height: 10000}, root_child0.layout)]
        }
      }
    );
  it
    align_self_flex_start
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignFlexStart,
          width: 10000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            12
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 0, width: 10000, height: 10000}, root_child0.layout)]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 90000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            13
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 90000, width: 10000, height: 10000}, root_child0.layout)]
        }
      }
    );
  it
    align_self_flex_end_override_flex_start
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          alignItems: CssAlignFlexStart,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignFlexEnd,
          width: 10000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 90000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            14
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 90000, width: 10000, height: 10000}, root_child0.layout)]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            15
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 0, width: 10000, height: 10000}, root_child0.layout)]
        }
      }
    );
  it
    border_no_size
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          borderTop: 10000,
          borderBottom: 10000,
          borderLeft: 10000,
          borderRight: 10000
        };
        let root = LayoutSupport.createNode withChildren::[||] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 || root.layout.width != 20000 || root.layout.height != 20000
        ) {
          assertLayouts 16 ({...root.layout, top: 0, left: 0, width: 20000, height: 20000}, root.layout) []
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 || root.layout.width != 20000 || root.layout.height != 20000
        ) {
          assertLayouts 17 ({...root.layout, top: 0, left: 0, width: 20000, height: 20000}, root.layout) []
        }
      }
    );
  it
    border_container_match_child
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          borderTop: 10000,
          borderBottom: 10000,
          borderLeft: 10000,
          borderRight: 10000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 30000 ||
          root.layout.height != 30000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            18
            ({...root.layout, top: 0, left: 0, width: 30000, height: 30000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 10000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 30000 ||
          root.layout.height != 30000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            19
            ({...root.layout, top: 0, left: 0, width: 30000, height: 30000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 10000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        }
      }
    );
  it
    border_stretch_child
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          borderTop: 10000,
          borderBottom: 10000,
          width: 100000,
          height: 100000,
          borderLeft: 10000,
          borderRight: 10000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 80000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            20
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 10000, width: 80000, height: 10000},
                root_child0.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 80000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            21
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 10000, width: 80000, height: 10000},
                root_child0.layout
              )
            ]
        }
      }
    );
  it
    border_center_child
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          justifyContent: CssJustifyCenter,
          alignItems: CssAlignCenter,
          borderTop: 10000,
          borderBottom: 20000,
          width: 100000,
          height: 100000,
          borderStart: 10000,
          borderEnd: 20000
        };
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignCenter,
          width: 10000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 40000 ||
          root_child0.layout.left != 40000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            22
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 40000, left: 40000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 40000 ||
          root_child0.layout.left != 50000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            23
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 40000, left: 50000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        }
      }
    );
  it
    max_width
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {...LayoutSupport.defaultStyle, maxWidth: 50000, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 50000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            24
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 0, width: 50000, height: 10000}, root_child0.layout)]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 50000 ||
          root_child0.layout.width != 50000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            25
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 50000, width: 50000, height: 10000}, root_child0.layout)]
        }
      }
    );
  it
    max_height
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, maxHeight: 50000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 50000
        ) {
          assertLayouts
            26
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 0, width: 10000, height: 50000}, root_child0.layout)]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 90000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 50000
        ) {
          assertLayouts
            27
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 90000, width: 10000, height: 50000}, root_child0.layout)]
        }
      }
    );
  it
    padding_no_size
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          paddingTop: 10000,
          paddingBottom: 10000,
          paddingLeft: 10000,
          paddingRight: 10000
        };
        let root = LayoutSupport.createNode withChildren::[||] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 || root.layout.width != 20000 || root.layout.height != 20000
        ) {
          assertLayouts 28 ({...root.layout, top: 0, left: 0, width: 20000, height: 20000}, root.layout) []
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 || root.layout.width != 20000 || root.layout.height != 20000
        ) {
          assertLayouts 29 ({...root.layout, top: 0, left: 0, width: 20000, height: 20000}, root.layout) []
        }
      }
    );
  it
    padding_container_match_child
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          paddingTop: 10000,
          paddingBottom: 10000,
          paddingLeft: 10000,
          paddingRight: 10000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 30000 ||
          root.layout.height != 30000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            30
            ({...root.layout, top: 0, left: 0, width: 30000, height: 30000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 10000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 30000 ||
          root.layout.height != 30000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            31
            ({...root.layout, top: 0, left: 0, width: 30000, height: 30000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 10000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        }
      }
    );
  it
    padding_stretch_child
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          paddingTop: 10000,
          paddingBottom: 10000,
          width: 100000,
          height: 100000,
          paddingLeft: 10000,
          paddingRight: 10000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 80000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            32
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 10000, width: 80000, height: 10000},
                root_child0.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 80000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            33
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 10000, width: 80000, height: 10000},
                root_child0.layout
              )
            ]
        }
      }
    );
  it
    padding_center_child
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          justifyContent: CssJustifyCenter,
          alignItems: CssAlignCenter,
          paddingTop: 10000,
          paddingBottom: 20000,
          width: 100000,
          height: 100000,
          paddingStart: 10000,
          paddingEnd: 20000
        };
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignCenter,
          width: 10000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 40000 ||
          root_child0.layout.left != 40000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            34
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 40000, left: 40000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 40000 ||
          root_child0.layout.left != 50000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            35
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 40000, left: 50000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        }
      }
    );
  it
    absolute_layout_width_height_start_top
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          positionType: CssPositionAbsolute,
          top: 10000,
          start: 10000,
          width: 10000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            36
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 10000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 80000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            37
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 80000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        }
      }
    );
  it
    absolute_layout_width_height_end_bottom
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          positionType: CssPositionAbsolute,
          bottom: 10000,
          endd: 10000,
          width: 10000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 80000 ||
          root_child0.layout.left != 80000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            38
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 80000, left: 80000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 80000 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            39
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 80000, left: 10000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        }
      }
    );
  it
    absolute_layout_start_top_end_bottom
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          positionType: CssPositionAbsolute,
          top: 10000,
          bottom: 10000,
          endd: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 90000 ||
          root_child0.layout.width != 0 || root_child0.layout.height != 80000
        ) {
          assertLayouts
            40
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 10000, left: 90000, width: 0, height: 80000}, root_child0.layout)]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 0 || root_child0.layout.height != 80000
        ) {
          assertLayouts
            41
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 10000, left: 10000, width: 0, height: 80000}, root_child0.layout)]
        }
      }
    );
  it
    absolute_layout_width_height_start_top_end_bottom
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          positionType: CssPositionAbsolute,
          top: 10000,
          bottom: 10000,
          start: 10000,
          endd: 10000,
          width: 10000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            42
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 10000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 80000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            43
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 80000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        }
      }
    );
  it
    do_not_clamp_height_of_absolute_node_to_height_of_its_overflow_hidden_parent
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          overflow: Hidden,
          width: 50000,
          height: 50000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, positionType: CssPositionAbsolute};
        let root_child0_child0_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_child0 =
          LayoutSupport.createNode withChildren::[||] andStyle::root_child0_child0_style ();
        let root_child0 =
          LayoutSupport.createNode withChildren::[|root_child0_child0|] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 50000 ||
          root.layout.height != 50000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 100000 ||
          root_child0_child0.layout.top != 0 ||
          root_child0_child0.layout.left != 0 ||
          root_child0_child0.layout.width != 100000 || root_child0_child0.layout.height != 100000
        ) {
          assertLayouts
            44
            ({...root.layout, top: 0, left: 0, width: 50000, height: 50000}, root.layout)
            [({...root_child0.layout, top: 0, left: 0, width: 100000, height: 100000}, root_child0.layout)];
          assertLayouts
            45
            ({...root_child0.layout, top: 0, left: 0, width: 100000, height: 100000}, root_child0.layout)
            [
              (
                {...root_child0_child0.layout, top: 0, left: 0, width: 100000, height: 100000},
                root_child0_child0.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 50000 ||
          root.layout.height != 50000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != (-50000) ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 100000 ||
          root_child0_child0.layout.top != 0 ||
          root_child0_child0.layout.left != 0 ||
          root_child0_child0.layout.width != 100000 || root_child0_child0.layout.height != 100000
        ) {
          assertLayouts
            46
            ({...root.layout, top: 0, left: 0, width: 50000, height: 50000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: (-50000), width: 100000, height: 100000},
                root_child0.layout
              )
            ];
          assertLayouts
            47
            (
              {...root_child0.layout, top: 0, left: (-50000), width: 100000, height: 100000},
              root_child0.layout
            )
            [
              (
                {...root_child0_child0.layout, top: 0, left: 0, width: 100000, height: 100000},
                root_child0_child0.layout
              )
            ]
        }
      }
    );
  it
    flex_direction_column_no_height
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000};
        let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 30000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 10000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 100000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 20000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 100000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            48
            ({...root.layout, top: 0, left: 0, width: 100000, height: 30000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 100000, height: 10000}, root_child0.layout),
              (
                {...root_child1.layout, top: 10000, left: 0, width: 100000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 20000, left: 0, width: 100000, height: 10000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 30000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 10000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 100000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 20000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 100000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            49
            ({...root.layout, top: 0, left: 0, width: 100000, height: 30000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 100000, height: 10000}, root_child0.layout),
              (
                {...root_child1.layout, top: 10000, left: 0, width: 100000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 20000, left: 0, width: 100000, height: 10000},
                root_child2.layout
              )
            ]
        }
      }
    );
  it
    flex_direction_row_no_width
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, flexDirection: CssFlexDirectionRow, height: 100000};
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 30000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 100000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 10000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 100000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 20000 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 100000
        ) {
          assertLayouts
            50
            ({...root.layout, top: 0, left: 0, width: 30000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 10000, height: 100000}, root_child0.layout),
              (
                {...root_child1.layout, top: 0, left: 10000, width: 10000, height: 100000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 20000, width: 10000, height: 100000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 30000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 20000 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 100000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 10000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 100000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 100000
        ) {
          assertLayouts
            51
            ({...root.layout, top: 0, left: 0, width: 30000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 20000, width: 10000, height: 100000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 0, left: 10000, width: 10000, height: 100000},
                root_child1.layout
              ),
              ({...root_child2.layout, top: 0, left: 0, width: 10000, height: 100000}, root_child2.layout)
            ]
        }
      }
    );
  it
    flex_direction_column
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 10000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 100000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 20000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 100000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            52
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 100000, height: 10000}, root_child0.layout),
              (
                {...root_child1.layout, top: 10000, left: 0, width: 100000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 20000, left: 0, width: 100000, height: 10000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 10000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 100000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 20000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 100000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            53
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 100000, height: 10000}, root_child0.layout),
              (
                {...root_child1.layout, top: 10000, left: 0, width: 100000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 20000, left: 0, width: 100000, height: 10000},
                root_child2.layout
              )
            ]
        }
      }
    );
  it
    flex_direction_row
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 100000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 10000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 100000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 20000 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 100000
        ) {
          assertLayouts
            54
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 10000, height: 100000}, root_child0.layout),
              (
                {...root_child1.layout, top: 0, left: 10000, width: 10000, height: 100000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 20000, width: 10000, height: 100000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 90000 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 100000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 80000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 100000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 70000 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 100000
        ) {
          assertLayouts
            55
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 90000, width: 10000, height: 100000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 0, left: 80000, width: 10000, height: 100000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 70000, width: 10000, height: 100000},
                root_child2.layout
              )
            ]
        }
      }
    );
  it
    flex_direction_column_reverse
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionColumnReverse,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 90000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 80000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 100000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 70000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 100000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            56
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 90000, left: 0, width: 100000, height: 10000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 80000, left: 0, width: 100000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 70000, left: 0, width: 100000, height: 10000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 90000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 80000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 100000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 70000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 100000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            57
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 90000, left: 0, width: 100000, height: 10000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 80000, left: 0, width: 100000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 70000, left: 0, width: 100000, height: 10000},
                root_child2.layout
              )
            ]
        }
      }
    );
  it
    flex_direction_row_reverse
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRowReverse,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 90000 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 100000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 80000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 100000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 70000 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 100000
        ) {
          assertLayouts
            58
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 90000, width: 10000, height: 100000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 0, left: 80000, width: 10000, height: 100000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 70000, width: 10000, height: 100000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 100000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 10000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 100000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 20000 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 100000
        ) {
          assertLayouts
            59
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 10000, height: 100000}, root_child0.layout),
              (
                {...root_child1.layout, top: 0, left: 10000, width: 10000, height: 100000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 20000, width: 10000, height: 100000},
                root_child2.layout
              )
            ]
        }
      }
    );
  it
    wrap_column
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, flexWrap: CssWrap, width: 60000, height: 100000};
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root_child3_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
        let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2, root_child3|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 60000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 30000 ||
          root_child0.layout.height != 30000 ||
          root_child1.layout.top != 30000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 30000 ||
          root_child1.layout.height != 30000 ||
          root_child2.layout.top != 60000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 30000 ||
          root_child2.layout.height != 30000 ||
          root_child3.layout.top != 0 ||
          root_child3.layout.left != 30000 ||
          root_child3.layout.width != 30000 || root_child3.layout.height != 30000
        ) {
          assertLayouts
            60
            ({...root.layout, top: 0, left: 0, width: 60000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 30000, height: 30000}, root_child0.layout),
              (
                {...root_child1.layout, top: 30000, left: 0, width: 30000, height: 30000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 60000, left: 0, width: 30000, height: 30000},
                root_child2.layout
              ),
              ({...root_child3.layout, top: 0, left: 30000, width: 30000, height: 30000}, root_child3.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 60000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 30000 ||
          root_child0.layout.width != 30000 ||
          root_child0.layout.height != 30000 ||
          root_child1.layout.top != 30000 ||
          root_child1.layout.left != 30000 ||
          root_child1.layout.width != 30000 ||
          root_child1.layout.height != 30000 ||
          root_child2.layout.top != 60000 ||
          root_child2.layout.left != 30000 ||
          root_child2.layout.width != 30000 ||
          root_child2.layout.height != 30000 ||
          root_child3.layout.top != 0 ||
          root_child3.layout.left != 0 ||
          root_child3.layout.width != 30000 || root_child3.layout.height != 30000
        ) {
          assertLayouts
            61
            ({...root.layout, top: 0, left: 0, width: 60000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 30000, width: 30000, height: 30000}, root_child0.layout),
              (
                {...root_child1.layout, top: 30000, left: 30000, width: 30000, height: 30000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 60000, left: 30000, width: 30000, height: 30000},
                root_child2.layout
              ),
              ({...root_child3.layout, top: 0, left: 0, width: 30000, height: 30000}, root_child3.layout)
            ]
        }
      }
    );
  it
    wrap_row
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          flexWrap: CssWrap,
          width: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root_child3_style = {...LayoutSupport.defaultStyle, width: 30000, height: 30000};
        let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2, root_child3|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 60000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 30000 ||
          root_child0.layout.height != 30000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 30000 ||
          root_child1.layout.width != 30000 ||
          root_child1.layout.height != 30000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 60000 ||
          root_child2.layout.width != 30000 ||
          root_child2.layout.height != 30000 ||
          root_child3.layout.top != 30000 ||
          root_child3.layout.left != 0 ||
          root_child3.layout.width != 30000 || root_child3.layout.height != 30000
        ) {
          assertLayouts
            62
            ({...root.layout, top: 0, left: 0, width: 100000, height: 60000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 30000, height: 30000}, root_child0.layout),
              (
                {...root_child1.layout, top: 0, left: 30000, width: 30000, height: 30000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 60000, width: 30000, height: 30000},
                root_child2.layout
              ),
              ({...root_child3.layout, top: 30000, left: 0, width: 30000, height: 30000}, root_child3.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 60000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 70000 ||
          root_child0.layout.width != 30000 ||
          root_child0.layout.height != 30000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 40000 ||
          root_child1.layout.width != 30000 ||
          root_child1.layout.height != 30000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 10000 ||
          root_child2.layout.width != 30000 ||
          root_child2.layout.height != 30000 ||
          root_child3.layout.top != 30000 ||
          root_child3.layout.left != 70000 ||
          root_child3.layout.width != 30000 || root_child3.layout.height != 30000
        ) {
          assertLayouts
            63
            ({...root.layout, top: 0, left: 0, width: 100000, height: 60000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 70000, width: 30000, height: 30000}, root_child0.layout),
              (
                {...root_child1.layout, top: 0, left: 40000, width: 30000, height: 30000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 10000, width: 30000, height: 30000},
                root_child2.layout
              ),
              (
                {...root_child3.layout, top: 30000, left: 70000, width: 30000, height: 30000},
                root_child3.layout
              )
            ]
        }
      }
    );
  it
    wrap_row_align_items_flex_end
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          alignItems: CssAlignFlexEnd,
          flexWrap: CssWrap,
          width: 100000
        };
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignFlexEnd,
          width: 30000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignFlexEnd,
          width: 30000,
          height: 20000
        };
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignFlexEnd,
          width: 30000,
          height: 30000
        };
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root_child3_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignFlexEnd,
          width: 30000,
          height: 30000
        };
        let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2, root_child3|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 60000 ||
          root_child0.layout.top != 20000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 30000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 10000 ||
          root_child1.layout.left != 30000 ||
          root_child1.layout.width != 30000 ||
          root_child1.layout.height != 20000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 60000 ||
          root_child2.layout.width != 30000 ||
          root_child2.layout.height != 30000 ||
          root_child3.layout.top != 30000 ||
          root_child3.layout.left != 0 ||
          root_child3.layout.width != 30000 || root_child3.layout.height != 30000
        ) {
          assertLayouts
            64
            ({...root.layout, top: 0, left: 0, width: 100000, height: 60000}, root.layout)
            [
              ({...root_child0.layout, top: 20000, left: 0, width: 30000, height: 10000}, root_child0.layout),
              (
                {...root_child1.layout, top: 10000, left: 30000, width: 30000, height: 20000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 60000, width: 30000, height: 30000},
                root_child2.layout
              ),
              ({...root_child3.layout, top: 30000, left: 0, width: 30000, height: 30000}, root_child3.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 60000 ||
          root_child0.layout.top != 20000 ||
          root_child0.layout.left != 70000 ||
          root_child0.layout.width != 30000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 10000 ||
          root_child1.layout.left != 40000 ||
          root_child1.layout.width != 30000 ||
          root_child1.layout.height != 20000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 10000 ||
          root_child2.layout.width != 30000 ||
          root_child2.layout.height != 30000 ||
          root_child3.layout.top != 30000 ||
          root_child3.layout.left != 70000 ||
          root_child3.layout.width != 30000 || root_child3.layout.height != 30000
        ) {
          assertLayouts
            65
            ({...root.layout, top: 0, left: 0, width: 100000, height: 60000}, root.layout)
            [
              (
                {...root_child0.layout, top: 20000, left: 70000, width: 30000, height: 10000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 10000, left: 40000, width: 30000, height: 20000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 10000, width: 30000, height: 30000},
                root_child2.layout
              ),
              (
                {...root_child3.layout, top: 30000, left: 70000, width: 30000, height: 30000},
                root_child3.layout
              )
            ]
        }
      }
    );
  it
    wrap_row_align_items_center
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          alignItems: CssAlignCenter,
          flexWrap: CssWrap,
          width: 100000
        };
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignCenter,
          width: 30000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignCenter,
          width: 30000,
          height: 20000
        };
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignCenter,
          width: 30000,
          height: 30000
        };
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root_child3_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignCenter,
          width: 30000,
          height: 30000
        };
        let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2, root_child3|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 60000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 30000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 5000 ||
          root_child1.layout.left != 30000 ||
          root_child1.layout.width != 30000 ||
          root_child1.layout.height != 20000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 60000 ||
          root_child2.layout.width != 30000 ||
          root_child2.layout.height != 30000 ||
          root_child3.layout.top != 30000 ||
          root_child3.layout.left != 0 ||
          root_child3.layout.width != 30000 || root_child3.layout.height != 30000
        ) {
          assertLayouts
            66
            ({...root.layout, top: 0, left: 0, width: 100000, height: 60000}, root.layout)
            [
              ({...root_child0.layout, top: 10000, left: 0, width: 30000, height: 10000}, root_child0.layout),
              (
                {...root_child1.layout, top: 5000, left: 30000, width: 30000, height: 20000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 60000, width: 30000, height: 30000},
                root_child2.layout
              ),
              ({...root_child3.layout, top: 30000, left: 0, width: 30000, height: 30000}, root_child3.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 60000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 70000 ||
          root_child0.layout.width != 30000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 5000 ||
          root_child1.layout.left != 40000 ||
          root_child1.layout.width != 30000 ||
          root_child1.layout.height != 20000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 10000 ||
          root_child2.layout.width != 30000 ||
          root_child2.layout.height != 30000 ||
          root_child3.layout.top != 30000 ||
          root_child3.layout.left != 70000 ||
          root_child3.layout.width != 30000 || root_child3.layout.height != 30000
        ) {
          assertLayouts
            67
            ({...root.layout, top: 0, left: 0, width: 100000, height: 60000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 70000, width: 30000, height: 10000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 5000, left: 40000, width: 30000, height: 20000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 10000, width: 30000, height: 30000},
                root_child2.layout
              ),
              (
                {...root_child3.layout, top: 30000, left: 70000, width: 30000, height: 30000},
                root_child3.layout
              )
            ]
        }
      }
    );
  it
    margin_start
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, marginStart: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 100000
        ) {
          assertLayouts
            68
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 10000, width: 10000, height: 100000}, root_child0.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 80000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 100000
        ) {
          assertLayouts
            69
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 80000, width: 10000, height: 100000}, root_child0.layout)
            ]
        }
      }
    );
  it
    margin_end
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          justifyContent: CssJustifyFlexEnd,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, marginEnd: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 80000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 100000
        ) {
          assertLayouts
            70
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 80000, width: 10000, height: 100000}, root_child0.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 100000
        ) {
          assertLayouts
            71
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 10000, width: 10000, height: 100000}, root_child0.layout)
            ]
        }
      }
    );
  it
    margin_left
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, marginLeft: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 100000
        ) {
          assertLayouts
            72
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 10000, width: 10000, height: 100000}, root_child0.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 90000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 100000
        ) {
          assertLayouts
            73
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 90000, width: 10000, height: 100000}, root_child0.layout)
            ]
        }
      }
    );
  it
    margin_top
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {...LayoutSupport.defaultStyle, marginTop: 10000, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            74
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 10000, left: 0, width: 100000, height: 10000}, root_child0.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            75
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 10000, left: 0, width: 100000, height: 10000}, root_child0.layout)
            ]
        }
      }
    );
  it
    margin_right
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          justifyContent: CssJustifyFlexEnd,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000, marginRight: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 80000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 100000
        ) {
          assertLayouts
            76
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 80000, width: 10000, height: 100000}, root_child0.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 100000
        ) {
          assertLayouts
            77
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [({...root_child0.layout, top: 0, left: 0, width: 10000, height: 100000}, root_child0.layout)]
        }
      }
    );
  it
    margin_bottom
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          justifyContent: CssJustifyFlexEnd,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, marginBottom: 10000, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 80000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            78
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 80000, left: 0, width: 100000, height: 10000}, root_child0.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 80000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            79
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 80000, left: 0, width: 100000, height: 10000}, root_child0.layout)
            ]
        }
      }
    );
  it
    align_content_flex_start
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          alignContent: CssAlignFlexStart,
          flexWrap: CssWrap,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root_child3_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
        let root_child4_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child4 = LayoutSupport.createNode withChildren::[||] andStyle::root_child4_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2, root_child3, root_child4|]
            andStyle::root_style
            ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 50000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 10000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 50000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 20000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 50000 ||
          root_child2.layout.height != 10000 ||
          root_child3.layout.top != 30000 ||
          root_child3.layout.left != 0 ||
          root_child3.layout.width != 50000 ||
          root_child3.layout.height != 10000 ||
          root_child4.layout.top != 40000 ||
          root_child4.layout.left != 0 ||
          root_child4.layout.width != 50000 || root_child4.layout.height != 10000
        ) {
          assertLayouts
            80
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 50000, height: 10000}, root_child0.layout),
              (
                {...root_child1.layout, top: 10000, left: 0, width: 50000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 20000, left: 0, width: 50000, height: 10000},
                root_child2.layout
              ),
              (
                {...root_child3.layout, top: 30000, left: 0, width: 50000, height: 10000},
                root_child3.layout
              ),
              ({...root_child4.layout, top: 40000, left: 0, width: 50000, height: 10000}, root_child4.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 50000 ||
          root_child0.layout.width != 50000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 10000 ||
          root_child1.layout.left != 50000 ||
          root_child1.layout.width != 50000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 20000 ||
          root_child2.layout.left != 50000 ||
          root_child2.layout.width != 50000 ||
          root_child2.layout.height != 10000 ||
          root_child3.layout.top != 30000 ||
          root_child3.layout.left != 50000 ||
          root_child3.layout.width != 50000 ||
          root_child3.layout.height != 10000 ||
          root_child4.layout.top != 40000 ||
          root_child4.layout.left != 50000 ||
          root_child4.layout.width != 50000 || root_child4.layout.height != 10000
        ) {
          assertLayouts
            81
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 50000, width: 50000, height: 10000}, root_child0.layout),
              (
                {...root_child1.layout, top: 10000, left: 50000, width: 50000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 20000, left: 50000, width: 50000, height: 10000},
                root_child2.layout
              ),
              (
                {...root_child3.layout, top: 30000, left: 50000, width: 50000, height: 10000},
                root_child3.layout
              ),
              (
                {...root_child4.layout, top: 40000, left: 50000, width: 50000, height: 10000},
                root_child4.layout
              )
            ]
        }
      }
    );
  it
    align_content_flex_end
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          alignContent: CssAlignFlexEnd,
          flexWrap: CssWrap,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root_child3_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
        let root_child4_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child4 = LayoutSupport.createNode withChildren::[||] andStyle::root_child4_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2, root_child3, root_child4|]
            andStyle::root_style
            ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 50000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 10000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 50000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 20000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 50000 ||
          root_child2.layout.height != 10000 ||
          root_child3.layout.top != 30000 ||
          root_child3.layout.left != 0 ||
          root_child3.layout.width != 50000 ||
          root_child3.layout.height != 10000 ||
          root_child4.layout.top != 40000 ||
          root_child4.layout.left != 0 ||
          root_child4.layout.width != 50000 || root_child4.layout.height != 10000
        ) {
          assertLayouts
            82
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 50000, height: 10000}, root_child0.layout),
              (
                {...root_child1.layout, top: 10000, left: 0, width: 50000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 20000, left: 0, width: 50000, height: 10000},
                root_child2.layout
              ),
              (
                {...root_child3.layout, top: 30000, left: 0, width: 50000, height: 10000},
                root_child3.layout
              ),
              ({...root_child4.layout, top: 40000, left: 0, width: 50000, height: 10000}, root_child4.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 50000 ||
          root_child0.layout.width != 50000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 10000 ||
          root_child1.layout.left != 50000 ||
          root_child1.layout.width != 50000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 20000 ||
          root_child2.layout.left != 50000 ||
          root_child2.layout.width != 50000 ||
          root_child2.layout.height != 10000 ||
          root_child3.layout.top != 30000 ||
          root_child3.layout.left != 50000 ||
          root_child3.layout.width != 50000 ||
          root_child3.layout.height != 10000 ||
          root_child4.layout.top != 40000 ||
          root_child4.layout.left != 50000 ||
          root_child4.layout.width != 50000 || root_child4.layout.height != 10000
        ) {
          assertLayouts
            83
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 50000, width: 50000, height: 10000}, root_child0.layout),
              (
                {...root_child1.layout, top: 10000, left: 50000, width: 50000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 20000, left: 50000, width: 50000, height: 10000},
                root_child2.layout
              ),
              (
                {...root_child3.layout, top: 30000, left: 50000, width: 50000, height: 10000},
                root_child3.layout
              ),
              (
                {...root_child4.layout, top: 40000, left: 50000, width: 50000, height: 10000},
                root_child4.layout
              )
            ]
        }
      }
    );
  it
    align_content_center
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          alignContent: CssAlignCenter,
          flexWrap: CssWrap,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root_child3_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
        let root_child4_style = {...LayoutSupport.defaultStyle, width: 50000, height: 10000};
        let root_child4 = LayoutSupport.createNode withChildren::[||] andStyle::root_child4_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2, root_child3, root_child4|]
            andStyle::root_style
            ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 50000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 10000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 50000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 20000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 50000 ||
          root_child2.layout.height != 10000 ||
          root_child3.layout.top != 30000 ||
          root_child3.layout.left != 0 ||
          root_child3.layout.width != 50000 ||
          root_child3.layout.height != 10000 ||
          root_child4.layout.top != 40000 ||
          root_child4.layout.left != 0 ||
          root_child4.layout.width != 50000 || root_child4.layout.height != 10000
        ) {
          assertLayouts
            84
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 50000, height: 10000}, root_child0.layout),
              (
                {...root_child1.layout, top: 10000, left: 0, width: 50000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 20000, left: 0, width: 50000, height: 10000},
                root_child2.layout
              ),
              (
                {...root_child3.layout, top: 30000, left: 0, width: 50000, height: 10000},
                root_child3.layout
              ),
              ({...root_child4.layout, top: 40000, left: 0, width: 50000, height: 10000}, root_child4.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 50000 ||
          root_child0.layout.width != 50000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 10000 ||
          root_child1.layout.left != 50000 ||
          root_child1.layout.width != 50000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 20000 ||
          root_child2.layout.left != 50000 ||
          root_child2.layout.width != 50000 ||
          root_child2.layout.height != 10000 ||
          root_child3.layout.top != 30000 ||
          root_child3.layout.left != 50000 ||
          root_child3.layout.width != 50000 ||
          root_child3.layout.height != 10000 ||
          root_child4.layout.top != 40000 ||
          root_child4.layout.left != 50000 ||
          root_child4.layout.width != 50000 || root_child4.layout.height != 10000
        ) {
          assertLayouts
            85
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 50000, width: 50000, height: 10000}, root_child0.layout),
              (
                {...root_child1.layout, top: 10000, left: 50000, width: 50000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 20000, left: 50000, width: 50000, height: 10000},
                root_child2.layout
              ),
              (
                {...root_child3.layout, top: 30000, left: 50000, width: 50000, height: 10000},
                root_child3.layout
              ),
              (
                {...root_child4.layout, top: 40000, left: 50000, width: 50000, height: 10000},
                root_child4.layout
              )
            ]
        }
      }
    );
  it
    align_content_stretch
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          alignContent: CssAlignStretch,
          flexWrap: CssWrap,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 50000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, width: 50000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, width: 50000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root_child3_style = {...LayoutSupport.defaultStyle, width: 50000};
        let root_child3 = LayoutSupport.createNode withChildren::[||] andStyle::root_child3_style ();
        let root_child4_style = {...LayoutSupport.defaultStyle, width: 50000};
        let root_child4 = LayoutSupport.createNode withChildren::[||] andStyle::root_child4_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2, root_child3, root_child4|]
            andStyle::root_style
            ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 50000 ||
          root_child0.layout.height != 0 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 50000 ||
          root_child1.layout.height != 0 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 50000 ||
          root_child2.layout.height != 0 ||
          root_child3.layout.top != 0 ||
          root_child3.layout.left != 0 ||
          root_child3.layout.width != 50000 ||
          root_child3.layout.height != 0 ||
          root_child4.layout.top != 0 ||
          root_child4.layout.left != 0 || root_child4.layout.width != 50000 || root_child4.layout.height != 0
        ) {
          assertLayouts
            86
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 50000, height: 0}, root_child0.layout),
              ({...root_child1.layout, top: 0, left: 0, width: 50000, height: 0}, root_child1.layout),
              ({...root_child2.layout, top: 0, left: 0, width: 50000, height: 0}, root_child2.layout),
              ({...root_child3.layout, top: 0, left: 0, width: 50000, height: 0}, root_child3.layout),
              ({...root_child4.layout, top: 0, left: 0, width: 50000, height: 0}, root_child4.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 50000 ||
          root_child0.layout.width != 50000 ||
          root_child0.layout.height != 0 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 50000 ||
          root_child1.layout.width != 50000 ||
          root_child1.layout.height != 0 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 50000 ||
          root_child2.layout.width != 50000 ||
          root_child2.layout.height != 0 ||
          root_child3.layout.top != 0 ||
          root_child3.layout.left != 50000 ||
          root_child3.layout.width != 50000 ||
          root_child3.layout.height != 0 ||
          root_child4.layout.top != 0 ||
          root_child4.layout.left != 50000 ||
          root_child4.layout.width != 50000 || root_child4.layout.height != 0
        ) {
          assertLayouts
            87
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 50000, width: 50000, height: 0}, root_child0.layout),
              ({...root_child1.layout, top: 0, left: 50000, width: 50000, height: 0}, root_child1.layout),
              ({...root_child2.layout, top: 0, left: 50000, width: 50000, height: 0}, root_child2.layout),
              ({...root_child3.layout, top: 0, left: 50000, width: 50000, height: 0}, root_child3.layout),
              ({...root_child4.layout, top: 0, left: 50000, width: 50000, height: 0}, root_child4.layout)
            ]
        }
      }
    );
  it
    justify_content_row_flex_start
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          width: 102000,
          height: 102000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 102000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 10000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 102000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 20000 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 102000
        ) {
          assertLayouts
            88
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 10000, height: 102000}, root_child0.layout),
              (
                {...root_child1.layout, top: 0, left: 10000, width: 10000, height: 102000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 20000, width: 10000, height: 102000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 92000 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 102000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 82000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 102000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 72000 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 102000
        ) {
          assertLayouts
            89
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 92000, width: 10000, height: 102000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 0, left: 82000, width: 10000, height: 102000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 72000, width: 10000, height: 102000},
                root_child2.layout
              )
            ]
        }
      }
    );
  it
    justify_content_row_flex_end
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          justifyContent: CssJustifyFlexEnd,
          width: 102000,
          height: 102000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 72000 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 102000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 82000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 102000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 92000 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 102000
        ) {
          assertLayouts
            90
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 72000, width: 10000, height: 102000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 0, left: 82000, width: 10000, height: 102000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 92000, width: 10000, height: 102000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 20000 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 102000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 10000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 102000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 102000
        ) {
          assertLayouts
            91
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 20000, width: 10000, height: 102000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 0, left: 10000, width: 10000, height: 102000},
                root_child1.layout
              ),
              ({...root_child2.layout, top: 0, left: 0, width: 10000, height: 102000}, root_child2.layout)
            ]
        }
      }
    );
  it
    justify_content_row_center
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          justifyContent: CssJustifyCenter,
          width: 102000,
          height: 102000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 36000 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 102000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 46000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 102000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 56000 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 102000
        ) {
          assertLayouts
            92
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 36000, width: 10000, height: 102000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 0, left: 46000, width: 10000, height: 102000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 56000, width: 10000, height: 102000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 56000 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 102000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 46000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 102000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 36000 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 102000
        ) {
          assertLayouts
            93
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 56000, width: 10000, height: 102000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 0, left: 46000, width: 10000, height: 102000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 36000, width: 10000, height: 102000},
                root_child2.layout
              )
            ]
        }
      }
    );
  it
    justify_content_row_space_between
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          justifyContent: CssJustifySpaceBetween,
          width: 102000,
          height: 102000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 102000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 46000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 102000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 92000 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 102000
        ) {
          assertLayouts
            94
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 10000, height: 102000}, root_child0.layout),
              (
                {...root_child1.layout, top: 0, left: 46000, width: 10000, height: 102000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 92000, width: 10000, height: 102000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 92000 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 102000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 46000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 102000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 102000
        ) {
          assertLayouts
            95
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 92000, width: 10000, height: 102000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 0, left: 46000, width: 10000, height: 102000},
                root_child1.layout
              ),
              ({...root_child2.layout, top: 0, left: 0, width: 10000, height: 102000}, root_child2.layout)
            ]
        }
      }
    );
  it
    justify_content_row_space_around
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          justifyContent: CssJustifySpaceAround,
          width: 102000,
          height: 102000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, width: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 12000 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 102000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 46000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 102000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 80000 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 102000
        ) {
          assertLayouts
            96
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 12000, width: 10000, height: 102000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 0, left: 46000, width: 10000, height: 102000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 80000, width: 10000, height: 102000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 80000 ||
          root_child0.layout.width != 10000 ||
          root_child0.layout.height != 102000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 46000 ||
          root_child1.layout.width != 10000 ||
          root_child1.layout.height != 102000 ||
          root_child2.layout.top != 0 ||
          root_child2.layout.left != 12000 ||
          root_child2.layout.width != 10000 || root_child2.layout.height != 102000
        ) {
          assertLayouts
            97
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 80000, width: 10000, height: 102000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 0, left: 46000, width: 10000, height: 102000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 0, left: 12000, width: 10000, height: 102000},
                root_child2.layout
              )
            ]
        }
      }
    );
  it
    justify_content_column_flex_start
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 102000, height: 102000};
        let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = LayoutSupport.defaultStyle;
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 102000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 10000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 102000 ||
          root_child1.layout.height != 0 ||
          root_child2.layout.top != 10000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 102000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            98
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 102000, height: 10000}, root_child0.layout),
              ({...root_child1.layout, top: 10000, left: 0, width: 102000, height: 0}, root_child1.layout),
              (
                {...root_child2.layout, top: 10000, left: 0, width: 102000, height: 10000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 102000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 10000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 102000 ||
          root_child1.layout.height != 0 ||
          root_child2.layout.top != 10000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 102000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            99
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 102000, height: 10000}, root_child0.layout),
              ({...root_child1.layout, top: 10000, left: 0, width: 102000, height: 0}, root_child1.layout),
              (
                {...root_child2.layout, top: 10000, left: 0, width: 102000, height: 10000},
                root_child2.layout
              )
            ]
        }
      }
    );
  it
    justify_content_column_flex_end
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          justifyContent: CssJustifyFlexEnd,
          width: 102000,
          height: 102000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 72000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 102000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 82000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 102000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 92000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 102000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            100
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              (
                {...root_child0.layout, top: 72000, left: 0, width: 102000, height: 10000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 82000, left: 0, width: 102000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 92000, left: 0, width: 102000, height: 10000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 72000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 102000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 82000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 102000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 92000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 102000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            101
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              (
                {...root_child0.layout, top: 72000, left: 0, width: 102000, height: 10000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 82000, left: 0, width: 102000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 92000, left: 0, width: 102000, height: 10000},
                root_child2.layout
              )
            ]
        }
      }
    );
  it
    justify_content_column_center
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          justifyContent: CssJustifyCenter,
          width: 102000,
          height: 102000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 36000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 102000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 46000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 102000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 56000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 102000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            102
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              (
                {...root_child0.layout, top: 36000, left: 0, width: 102000, height: 10000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 46000, left: 0, width: 102000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 56000, left: 0, width: 102000, height: 10000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 36000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 102000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 46000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 102000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 56000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 102000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            103
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              (
                {...root_child0.layout, top: 36000, left: 0, width: 102000, height: 10000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 46000, left: 0, width: 102000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 56000, left: 0, width: 102000, height: 10000},
                root_child2.layout
              )
            ]
        }
      }
    );
  it
    justify_content_column_space_between
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          justifyContent: CssJustifySpaceBetween,
          width: 102000,
          height: 102000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 102000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 46000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 102000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 92000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 102000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            104
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 102000, height: 10000}, root_child0.layout),
              (
                {...root_child1.layout, top: 46000, left: 0, width: 102000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 92000, left: 0, width: 102000, height: 10000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 102000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 46000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 102000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 92000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 102000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            105
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 102000, height: 10000}, root_child0.layout),
              (
                {...root_child1.layout, top: 46000, left: 0, width: 102000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 92000, left: 0, width: 102000, height: 10000},
                root_child2.layout
              )
            ]
        }
      }
    );
  it
    justify_content_column_space_around
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          justifyContent: CssJustifySpaceAround,
          width: 102000,
          height: 102000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root_child2_style = {...LayoutSupport.defaultStyle, height: 10000};
        let root_child2 = LayoutSupport.createNode withChildren::[||] andStyle::root_child2_style ();
        let root =
          LayoutSupport.createNode
            withChildren::[|root_child0, root_child1, root_child2|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 12000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 102000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 46000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 102000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 80000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 102000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            106
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              (
                {...root_child0.layout, top: 12000, left: 0, width: 102000, height: 10000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 46000, left: 0, width: 102000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 80000, left: 0, width: 102000, height: 10000},
                root_child2.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 102000 ||
          root.layout.height != 102000 ||
          root_child0.layout.top != 12000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 102000 ||
          root_child0.layout.height != 10000 ||
          root_child1.layout.top != 46000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 102000 ||
          root_child1.layout.height != 10000 ||
          root_child2.layout.top != 80000 ||
          root_child2.layout.left != 0 ||
          root_child2.layout.width != 102000 || root_child2.layout.height != 10000
        ) {
          assertLayouts
            107
            ({...root.layout, top: 0, left: 0, width: 102000, height: 102000}, root.layout)
            [
              (
                {...root_child0.layout, top: 12000, left: 0, width: 102000, height: 10000},
                root_child0.layout
              ),
              (
                {...root_child1.layout, top: 46000, left: 0, width: 102000, height: 10000},
                root_child1.layout
              ),
              (
                {...root_child2.layout, top: 80000, left: 0, width: 102000, height: 10000},
                root_child2.layout
              )
            ]
        }
      }
    );
  it
    border_flex_child
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          borderTop: 10000,
          borderBottom: 10000,
          width: 100000,
          height: 100000,
          borderLeft: 10000,
          borderRight: 10000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, width: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 80000
        ) {
          assertLayouts
            108
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 10000, width: 10000, height: 80000},
                root_child0.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 80000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 80000
        ) {
          assertLayouts
            109
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 80000, width: 10000, height: 80000},
                root_child0.layout
              )
            ]
        }
      }
    );
  it
    min_height
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, minHeight: 60000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root =
          LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 80000 ||
          root_child1.layout.top != 80000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 100000 || root_child1.layout.height != 20000
        ) {
          assertLayouts
            110
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 100000, height: 80000}, root_child0.layout),
              (
                {...root_child1.layout, top: 80000, left: 0, width: 100000, height: 20000},
                root_child1.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 80000 ||
          root_child1.layout.top != 80000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 100000 || root_child1.layout.height != 20000
        ) {
          assertLayouts
            111
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 100000, height: 80000}, root_child0.layout),
              (
                {...root_child1.layout, top: 80000, left: 0, width: 100000, height: 20000},
                root_child1.layout
              )
            ]
        }
      }
    );
  it
    min_width
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, minWidth: 60000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root =
          LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 80000 ||
          root_child0.layout.height != 100000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 80000 ||
          root_child1.layout.width != 20000 || root_child1.layout.height != 100000
        ) {
          assertLayouts
            112
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 80000, height: 100000}, root_child0.layout),
              (
                {...root_child1.layout, top: 0, left: 80000, width: 20000, height: 100000},
                root_child1.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 20000 ||
          root_child0.layout.width != 80000 ||
          root_child0.layout.height != 100000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 20000 || root_child1.layout.height != 100000
        ) {
          assertLayouts
            113
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 20000, width: 80000, height: 100000},
                root_child0.layout
              ),
              ({...root_child1.layout, top: 0, left: 0, width: 20000, height: 100000}, root_child1.layout)
            ]
        }
      }
    );
  it
    padding_flex_child
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          paddingTop: 10000,
          paddingBottom: 10000,
          width: 100000,
          height: 100000,
          paddingLeft: 10000,
          paddingRight: 10000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, width: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 80000
        ) {
          assertLayouts
            114
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 10000, width: 10000, height: 80000},
                root_child0.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 80000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 80000
        ) {
          assertLayouts
            115
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 10000, left: 80000, width: 10000, height: 80000},
                root_child0.layout
              )
            ]
        }
      }
    );
  it
    margin_and_flex_row
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          flexGrow: 1000,
          marginStart: 10000,
          marginEnd: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 80000 || root_child0.layout.height != 100000
        ) {
          assertLayouts
            116
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 10000, width: 80000, height: 100000}, root_child0.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 80000 || root_child0.layout.height != 100000
        ) {
          assertLayouts
            117
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 10000, width: 80000, height: 100000}, root_child0.layout)
            ]
        }
      }
    );
  it
    margin_and_flex_column
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          flexGrow: 1000,
          marginTop: 10000,
          marginBottom: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 || root_child0.layout.height != 80000
        ) {
          assertLayouts
            118
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 10000, left: 0, width: 100000, height: 80000}, root_child0.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 || root_child0.layout.height != 80000
        ) {
          assertLayouts
            119
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 10000, left: 0, width: 100000, height: 80000}, root_child0.layout)
            ]
        }
      }
    );
  it
    margin_and_stretch_row
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          flexGrow: 1000,
          marginTop: 10000,
          marginBottom: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 || root_child0.layout.height != 80000
        ) {
          assertLayouts
            120
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 10000, left: 0, width: 100000, height: 80000}, root_child0.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 10000 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 || root_child0.layout.height != 80000
        ) {
          assertLayouts
            121
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 10000, left: 0, width: 100000, height: 80000}, root_child0.layout)
            ]
        }
      }
    );
  it
    margin_and_stretch_column
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          flexGrow: 1000,
          marginStart: 10000,
          marginEnd: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 80000 || root_child0.layout.height != 100000
        ) {
          assertLayouts
            122
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 10000, width: 80000, height: 100000}, root_child0.layout)
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 10000 ||
          root_child0.layout.width != 80000 || root_child0.layout.height != 100000
        ) {
          assertLayouts
            123
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 10000, width: 80000, height: 100000}, root_child0.layout)
            ]
        }
      }
    );
  it
    margin_with_sibling_row
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, marginEnd: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root =
          LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 45000 ||
          root_child0.layout.height != 100000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 55000 ||
          root_child1.layout.width != 45000 || root_child1.layout.height != 100000
        ) {
          assertLayouts
            124
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 45000, height: 100000}, root_child0.layout),
              (
                {...root_child1.layout, top: 0, left: 55000, width: 45000, height: 100000},
                root_child1.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 55000 ||
          root_child0.layout.width != 45000 ||
          root_child0.layout.height != 100000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 45000 || root_child1.layout.height != 100000
        ) {
          assertLayouts
            125
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 55000, width: 45000, height: 100000},
                root_child0.layout
              ),
              ({...root_child1.layout, top: 0, left: 0, width: 45000, height: 100000}, root_child1.layout)
            ]
        }
      }
    );
  it
    margin_with_sibling_column
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, marginBottom: 10000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root =
          LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 45000 ||
          root_child1.layout.top != 55000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 100000 || root_child1.layout.height != 45000
        ) {
          assertLayouts
            126
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 100000, height: 45000}, root_child0.layout),
              (
                {...root_child1.layout, top: 55000, left: 0, width: 100000, height: 45000},
                root_child1.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 45000 ||
          root_child1.layout.top != 55000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 100000 || root_child1.layout.height != 45000
        ) {
          assertLayouts
            127
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 100000, height: 45000}, root_child0.layout),
              (
                {...root_child1.layout, top: 55000, left: 0, width: 100000, height: 45000},
                root_child1.layout
              )
            ]
        }
      }
    );
  it
    flex_basis_flex_grow_column
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, flexBasis: 50000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root =
          LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 75000 ||
          root_child1.layout.top != 75000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 100000 || root_child1.layout.height != 25000
        ) {
          assertLayouts
            128
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 100000, height: 75000}, root_child0.layout),
              (
                {...root_child1.layout, top: 75000, left: 0, width: 100000, height: 25000},
                root_child1.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 75000 ||
          root_child1.layout.top != 75000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 100000 || root_child1.layout.height != 25000
        ) {
          assertLayouts
            129
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 100000, height: 75000}, root_child0.layout),
              (
                {...root_child1.layout, top: 75000, left: 0, width: 100000, height: 25000},
                root_child1.layout
              )
            ]
        }
      }
    );
  it
    flex_basis_flex_grow_row
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, flexGrow: 1000, flexBasis: 50000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, flexGrow: 1000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root =
          LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 75000 ||
          root_child0.layout.height != 100000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 75000 ||
          root_child1.layout.width != 25000 || root_child1.layout.height != 100000
        ) {
          assertLayouts
            130
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 75000, height: 100000}, root_child0.layout),
              (
                {...root_child1.layout, top: 0, left: 75000, width: 25000, height: 100000},
                root_child1.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 25000 ||
          root_child0.layout.width != 75000 ||
          root_child0.layout.height != 100000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 25000 || root_child1.layout.height != 100000
        ) {
          assertLayouts
            131
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 25000, width: 75000, height: 100000},
                root_child0.layout
              ),
              ({...root_child1.layout, top: 0, left: 0, width: 25000, height: 100000}, root_child1.layout)
            ]
        }
      }
    );
  it
    flex_basis_flex_shrink_column
    (
      fun () => {
        let root_style = {...LayoutSupport.defaultStyle, width: 100000, height: 100000};
        let root_child0_style = {...LayoutSupport.defaultStyle, flexShrink: 1000, flexBasis: 100000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, flexBasis: 50000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root =
          LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 50000 ||
          root_child1.layout.top != 50000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 100000 || root_child1.layout.height != 50000
        ) {
          assertLayouts
            132
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 100000, height: 50000}, root_child0.layout),
              (
                {...root_child1.layout, top: 50000, left: 0, width: 100000, height: 50000},
                root_child1.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 100000 ||
          root_child0.layout.height != 50000 ||
          root_child1.layout.top != 50000 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 100000 || root_child1.layout.height != 50000
        ) {
          assertLayouts
            133
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 100000, height: 50000}, root_child0.layout),
              (
                {...root_child1.layout, top: 50000, left: 0, width: 100000, height: 50000},
                root_child1.layout
              )
            ]
        }
      }
    );
  it
    flex_basis_flex_shrink_row
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          flexDirection: CssFlexDirectionRow,
          width: 100000,
          height: 100000
        };
        let root_child0_style = {...LayoutSupport.defaultStyle, flexShrink: 1000, flexBasis: 100000};
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root_child1_style = {...LayoutSupport.defaultStyle, flexBasis: 50000};
        let root_child1 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_style ();
        let root =
          LayoutSupport.createNode withChildren::[|root_child0, root_child1|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 0 ||
          root_child0.layout.width != 50000 ||
          root_child0.layout.height != 100000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 50000 ||
          root_child1.layout.width != 50000 || root_child1.layout.height != 100000
        ) {
          assertLayouts
            134
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              ({...root_child0.layout, top: 0, left: 0, width: 50000, height: 100000}, root_child0.layout),
              (
                {...root_child1.layout, top: 0, left: 50000, width: 50000, height: 100000},
                root_child1.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 0 ||
          root_child0.layout.left != 50000 ||
          root_child0.layout.width != 50000 ||
          root_child0.layout.height != 100000 ||
          root_child1.layout.top != 0 ||
          root_child1.layout.left != 0 ||
          root_child1.layout.width != 50000 || root_child1.layout.height != 100000
        ) {
          assertLayouts
            135
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 0, left: 50000, width: 50000, height: 100000},
                root_child0.layout
              ),
              ({...root_child1.layout, top: 0, left: 0, width: 50000, height: 100000}, root_child1.layout)
            ]
        }
      }
    );
  it
    jwalke_border_width_only_start
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          justifyContent: CssJustifyCenter,
          alignItems: CssAlignCenter,
          borderTop: 10000,
          borderBottom: 20000,
          width: 100000,
          height: 100000,
          borderStart: 10000
        };
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignCenter,
          width: 10000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 40000 ||
          root_child0.layout.left != 50000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            136
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 40000, left: 50000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 40000 ||
          root_child0.layout.left != 40000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            137
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 40000, left: 40000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        }
      }
    );
  it
    jwalke_border_width_only_end
    (
      fun () => {
        let root_style = {
          ...LayoutSupport.defaultStyle,
          justifyContent: CssJustifyCenter,
          alignItems: CssAlignCenter,
          borderTop: 10000,
          borderBottom: 20000,
          width: 100000,
          height: 100000,
          borderEnd: 10000
        };
        let root_child0_style = {
          ...LayoutSupport.defaultStyle,
          alignSelf: CssAlignCenter,
          width: 10000,
          height: 10000
        };
        let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();
        let root = LayoutSupport.createNode withChildren::[|root_child0|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionLtr;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 40000 ||
          root_child0.layout.left != 40000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            138
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 40000, left: 40000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        };
        Layout.layoutNode root cssUndefined cssUndefined CssDirectionRtl;
        if (
          root.layout.top != 0 ||
          root.layout.left != 0 ||
          root.layout.width != 100000 ||
          root.layout.height != 100000 ||
          root_child0.layout.top != 40000 ||
          root_child0.layout.left != 50000 ||
          root_child0.layout.width != 10000 || root_child0.layout.height != 10000
        ) {
          assertLayouts
            139
            ({...root.layout, top: 0, left: 0, width: 100000, height: 100000}, root.layout)
            [
              (
                {...root_child0.layout, top: 40000, left: 50000, width: 10000, height: 10000},
                root_child0.layout
              )
            ]
        }
      }
    );
  LayoutTestUtils.displayOutcomes ()
};
